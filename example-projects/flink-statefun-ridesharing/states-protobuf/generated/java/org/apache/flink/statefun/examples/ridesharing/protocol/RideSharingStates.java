// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ridesharing.proto

package org.apache.flink.statefun.examples.ridesharing.protocol;

public final class RideSharingStates {
  private RideSharingStates() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface InboundPassengerMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:InboundPassengerMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string passenger_id = 1;</code>
     * @return The passengerId.
     */
    java.lang.String getPassengerId();
    /**
     * <code>string passenger_id = 1;</code>
     * @return The bytes for passengerId.
     */
    com.google.protobuf.ByteString
        getPassengerIdBytes();

    /**
     * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
     * @return Whether the requestRide field is set.
     */
    boolean hasRequestRide();
    /**
     * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
     * @return The requestRide.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide getRequestRide();
    /**
     * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRideOrBuilder getRequestRideOrBuilder();

    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.MessageCase getMessageCase();
  }
  /**
   * <pre>
   * the messages that corresponds to the FROM_PASSENGER_INGRESS
   * </pre>
   *
   * Protobuf type {@code InboundPassengerMessage}
   */
  public static final class InboundPassengerMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:InboundPassengerMessage)
      InboundPassengerMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InboundPassengerMessage.newBuilder() to construct.
    private InboundPassengerMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InboundPassengerMessage() {
      passengerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InboundPassengerMessage();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InboundPassengerMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              passengerId_ = s;
              break;
            }
            case 18: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder subBuilder = null;
              if (messageCase_ == 2) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 2;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.Builder.class);
    }

    public interface RequestRideOrBuilder extends
        // @@protoc_insertion_point(interface_extends:InboundPassengerMessage.RequestRide)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 start_geo_cell = 2;</code>
       * @return The startGeoCell.
       */
      int getStartGeoCell();

      /**
       * <code>int32 end_geo_cell = 3;</code>
       * @return The endGeoCell.
       */
      int getEndGeoCell();
    }
    /**
     * <pre>
     * A message sent by the physical driver to the ridesharing statefun job, indicating that the user
     * would like to be picked up from start_geo_cell and dropped off at end_geo_cell
     * </pre>
     *
     * Protobuf type {@code InboundPassengerMessage.RequestRide}
     */
    public static final class RequestRide extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:InboundPassengerMessage.RequestRide)
        RequestRideOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RequestRide.newBuilder() to construct.
      private RequestRide(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RequestRide() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RequestRide();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RequestRide(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 16: {

                startGeoCell_ = input.readInt32();
                break;
              }
              case 24: {

                endGeoCell_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_RequestRide_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_RequestRide_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder.class);
      }

      public static final int START_GEO_CELL_FIELD_NUMBER = 2;
      private int startGeoCell_;
      /**
       * <code>int32 start_geo_cell = 2;</code>
       * @return The startGeoCell.
       */
      @java.lang.Override
      public int getStartGeoCell() {
        return startGeoCell_;
      }

      public static final int END_GEO_CELL_FIELD_NUMBER = 3;
      private int endGeoCell_;
      /**
       * <code>int32 end_geo_cell = 3;</code>
       * @return The endGeoCell.
       */
      @java.lang.Override
      public int getEndGeoCell() {
        return endGeoCell_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (startGeoCell_ != 0) {
          output.writeInt32(2, startGeoCell_);
        }
        if (endGeoCell_ != 0) {
          output.writeInt32(3, endGeoCell_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (startGeoCell_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, startGeoCell_);
        }
        if (endGeoCell_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, endGeoCell_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) obj;

        if (getStartGeoCell()
            != other.getStartGeoCell()) return false;
        if (getEndGeoCell()
            != other.getEndGeoCell()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + START_GEO_CELL_FIELD_NUMBER;
        hash = (53 * hash) + getStartGeoCell();
        hash = (37 * hash) + END_GEO_CELL_FIELD_NUMBER;
        hash = (53 * hash) + getEndGeoCell();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A message sent by the physical driver to the ridesharing statefun job, indicating that the user
       * would like to be picked up from start_geo_cell and dropped off at end_geo_cell
       * </pre>
       *
       * Protobuf type {@code InboundPassengerMessage.RequestRide}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:InboundPassengerMessage.RequestRide)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRideOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_RequestRide_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_RequestRide_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          startGeoCell_ = 0;

          endGeoCell_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_RequestRide_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide(this);
          result.startGeoCell_ = startGeoCell_;
          result.endGeoCell_ = endGeoCell_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance()) return this;
          if (other.getStartGeoCell() != 0) {
            setStartGeoCell(other.getStartGeoCell());
          }
          if (other.getEndGeoCell() != 0) {
            setEndGeoCell(other.getEndGeoCell());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int startGeoCell_ ;
        /**
         * <code>int32 start_geo_cell = 2;</code>
         * @return The startGeoCell.
         */
        @java.lang.Override
        public int getStartGeoCell() {
          return startGeoCell_;
        }
        /**
         * <code>int32 start_geo_cell = 2;</code>
         * @param value The startGeoCell to set.
         * @return This builder for chaining.
         */
        public Builder setStartGeoCell(int value) {
          
          startGeoCell_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 start_geo_cell = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearStartGeoCell() {
          
          startGeoCell_ = 0;
          onChanged();
          return this;
        }

        private int endGeoCell_ ;
        /**
         * <code>int32 end_geo_cell = 3;</code>
         * @return The endGeoCell.
         */
        @java.lang.Override
        public int getEndGeoCell() {
          return endGeoCell_;
        }
        /**
         * <code>int32 end_geo_cell = 3;</code>
         * @param value The endGeoCell to set.
         * @return This builder for chaining.
         */
        public Builder setEndGeoCell(int value) {
          
          endGeoCell_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 end_geo_cell = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearEndGeoCell() {
          
          endGeoCell_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:InboundPassengerMessage.RequestRide)
      }

      // @@protoc_insertion_point(class_scope:InboundPassengerMessage.RequestRide)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RequestRide>
          PARSER = new com.google.protobuf.AbstractParser<RequestRide>() {
        @java.lang.Override
        public RequestRide parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RequestRide(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RequestRide> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RequestRide> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int messageCase_ = 0;
    private java.lang.Object message_;
    public enum MessageCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      REQUEST_RIDE(2),
      MESSAGE_NOT_SET(0);
      private final int value;
      private MessageCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MessageCase valueOf(int value) {
        return forNumber(value);
      }

      public static MessageCase forNumber(int value) {
        switch (value) {
          case 2: return REQUEST_RIDE;
          case 0: return MESSAGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MessageCase
    getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public static final int PASSENGER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object passengerId_;
    /**
     * <code>string passenger_id = 1;</code>
     * @return The passengerId.
     */
    @java.lang.Override
    public java.lang.String getPassengerId() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        passengerId_ = s;
        return s;
      }
    }
    /**
     * <code>string passenger_id = 1;</code>
     * @return The bytes for passengerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPassengerIdBytes() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        passengerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REQUEST_RIDE_FIELD_NUMBER = 2;
    /**
     * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
     * @return Whether the requestRide field is set.
     */
    @java.lang.Override
    public boolean hasRequestRide() {
      return messageCase_ == 2;
    }
    /**
     * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
     * @return The requestRide.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide getRequestRide() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance();
    }
    /**
     * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRideOrBuilder getRequestRideOrBuilder() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getPassengerIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, passengerId_);
      }
      if (messageCase_ == 2) {
        output.writeMessage(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getPassengerIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, passengerId_);
      }
      if (messageCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage) obj;

      if (!getPassengerId()
          .equals(other.getPassengerId())) return false;
      if (!getMessageCase().equals(other.getMessageCase())) return false;
      switch (messageCase_) {
        case 2:
          if (!getRequestRide()
              .equals(other.getRequestRide())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PASSENGER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getPassengerId().hashCode();
      switch (messageCase_) {
        case 2:
          hash = (37 * hash) + REQUEST_RIDE_FIELD_NUMBER;
          hash = (53 * hash) + getRequestRide().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * the messages that corresponds to the FROM_PASSENGER_INGRESS
     * </pre>
     *
     * Protobuf type {@code InboundPassengerMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:InboundPassengerMessage)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        passengerId_ = "";

        messageCase_ = 0;
        message_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundPassengerMessage_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage(this);
        result.passengerId_ = passengerId_;
        if (messageCase_ == 2) {
          if (requestRideBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = requestRideBuilder_.build();
          }
        }
        result.messageCase_ = messageCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.getDefaultInstance()) return this;
        if (!other.getPassengerId().isEmpty()) {
          passengerId_ = other.passengerId_;
          onChanged();
        }
        switch (other.getMessageCase()) {
          case REQUEST_RIDE: {
            mergeRequestRide(other.getRequestRide());
            break;
          }
          case MESSAGE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int messageCase_ = 0;
      private java.lang.Object message_;
      public MessageCase
          getMessageCase() {
        return MessageCase.forNumber(
            messageCase_);
      }

      public Builder clearMessage() {
        messageCase_ = 0;
        message_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object passengerId_ = "";
      /**
       * <code>string passenger_id = 1;</code>
       * @return The passengerId.
       */
      public java.lang.String getPassengerId() {
        java.lang.Object ref = passengerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          passengerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @return The bytes for passengerId.
       */
      public com.google.protobuf.ByteString
          getPassengerIdBytes() {
        java.lang.Object ref = passengerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passengerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @param value The passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        passengerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerId() {
        
        passengerId_ = getDefaultInstance().getPassengerId();
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @param value The bytes for passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        passengerId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRideOrBuilder> requestRideBuilder_;
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       * @return Whether the requestRide field is set.
       */
      @java.lang.Override
      public boolean hasRequestRide() {
        return messageCase_ == 2;
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       * @return The requestRide.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide getRequestRide() {
        if (requestRideBuilder_ == null) {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance();
        } else {
          if (messageCase_ == 2) {
            return requestRideBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       */
      public Builder setRequestRide(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide value) {
        if (requestRideBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          requestRideBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       */
      public Builder setRequestRide(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder builderForValue) {
        if (requestRideBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          requestRideBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       */
      public Builder mergeRequestRide(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide value) {
        if (requestRideBuilder_ == null) {
          if (messageCase_ == 2 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 2) {
            requestRideBuilder_.mergeFrom(value);
          }
          requestRideBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       */
      public Builder clearRequestRide() {
        if (requestRideBuilder_ == null) {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
          }
          requestRideBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder getRequestRideBuilder() {
        return getRequestRideFieldBuilder().getBuilder();
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRideOrBuilder getRequestRideOrBuilder() {
        if ((messageCase_ == 2) && (requestRideBuilder_ != null)) {
          return requestRideBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundPassengerMessage.RequestRide request_ride = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRideOrBuilder> 
          getRequestRideFieldBuilder() {
        if (requestRideBuilder_ == null) {
          if (!(messageCase_ == 2)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.getDefaultInstance();
          }
          requestRideBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRideOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage.RequestRide) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 2;
        onChanged();;
        return requestRideBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:InboundPassengerMessage)
    }

    // @@protoc_insertion_point(class_scope:InboundPassengerMessage)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InboundPassengerMessage>
        PARSER = new com.google.protobuf.AbstractParser<InboundPassengerMessage>() {
      @java.lang.Override
      public InboundPassengerMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InboundPassengerMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InboundPassengerMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InboundPassengerMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundPassengerMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OutboundPassengerMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:OutboundPassengerMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string passenger_id = 1;</code>
     * @return The passengerId.
     */
    java.lang.String getPassengerId();
    /**
     * <code>string passenger_id = 1;</code>
     * @return The bytes for passengerId.
     */
    com.google.protobuf.ByteString
        getPassengerIdBytes();

    /**
     * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
     * @return Whether the driverFound field is set.
     */
    boolean hasDriverFound();
    /**
     * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
     * @return The driverFound.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound getDriverFound();
    /**
     * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFoundOrBuilder getDriverFoundOrBuilder();

    /**
     * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
     * @return Whether the rideFailed field is set.
     */
    boolean hasRideFailed();
    /**
     * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
     * @return The rideFailed.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed getRideFailed();
    /**
     * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailedOrBuilder getRideFailedOrBuilder();

    /**
     * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
     * @return Whether the rideStarted field is set.
     */
    boolean hasRideStarted();
    /**
     * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
     * @return The rideStarted.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted getRideStarted();
    /**
     * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStartedOrBuilder getRideStartedOrBuilder();

    /**
     * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
     * @return Whether the rideEnded field is set.
     */
    boolean hasRideEnded();
    /**
     * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
     * @return The rideEnded.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded getRideEnded();
    /**
     * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEndedOrBuilder getRideEndedOrBuilder();

    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.MessageCase getMessageCase();
  }
  /**
   * <pre>
   * the messages that corresponds to the TO_PASSENGER_EGRESS
   * </pre>
   *
   * Protobuf type {@code OutboundPassengerMessage}
   */
  public static final class OutboundPassengerMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:OutboundPassengerMessage)
      OutboundPassengerMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OutboundPassengerMessage.newBuilder() to construct.
    private OutboundPassengerMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OutboundPassengerMessage() {
      passengerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OutboundPassengerMessage();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OutboundPassengerMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              passengerId_ = s;
              break;
            }
            case 18: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder subBuilder = null;
              if (messageCase_ == 2) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 2;
              break;
            }
            case 26: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder subBuilder = null;
              if (messageCase_ == 3) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 3;
              break;
            }
            case 34: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder subBuilder = null;
              if (messageCase_ == 4) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 4;
              break;
            }
            case 42: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder subBuilder = null;
              if (messageCase_ == 5) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 5;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.Builder.class);
    }

    public interface DriverHasBeenFoundOrBuilder extends
        // @@protoc_insertion_point(interface_extends:OutboundPassengerMessage.DriverHasBeenFound)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string driver_id = 2;</code>
       * @return The driverId.
       */
      java.lang.String getDriverId();
      /**
       * <code>string driver_id = 2;</code>
       * @return The bytes for driverId.
       */
      com.google.protobuf.ByteString
          getDriverIdBytes();

      /**
       * <code>int32 driver_geo_cell = 3;</code>
       * @return The driverGeoCell.
       */
      int getDriverGeoCell();
    }
    /**
     * <pre>
     * A message that is sent to the passenger, when there is a driver that 
     * is ready to pick them up.
     * </pre>
     *
     * Protobuf type {@code OutboundPassengerMessage.DriverHasBeenFound}
     */
    public static final class DriverHasBeenFound extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:OutboundPassengerMessage.DriverHasBeenFound)
        DriverHasBeenFoundOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DriverHasBeenFound.newBuilder() to construct.
      private DriverHasBeenFound(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DriverHasBeenFound() {
        driverId_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DriverHasBeenFound();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private DriverHasBeenFound(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                driverId_ = s;
                break;
              }
              case 24: {

                driverGeoCell_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_DriverHasBeenFound_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_DriverHasBeenFound_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder.class);
      }

      public static final int DRIVER_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object driverId_;
      /**
       * <code>string driver_id = 2;</code>
       * @return The driverId.
       */
      @java.lang.Override
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        }
      }
      /**
       * <code>string driver_id = 2;</code>
       * @return The bytes for driverId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DRIVER_GEO_CELL_FIELD_NUMBER = 3;
      private int driverGeoCell_;
      /**
       * <code>int32 driver_geo_cell = 3;</code>
       * @return The driverGeoCell.
       */
      @java.lang.Override
      public int getDriverGeoCell() {
        return driverGeoCell_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getDriverIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, driverId_);
        }
        if (driverGeoCell_ != 0) {
          output.writeInt32(3, driverGeoCell_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getDriverIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, driverId_);
        }
        if (driverGeoCell_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, driverGeoCell_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) obj;

        if (!getDriverId()
            .equals(other.getDriverId())) return false;
        if (getDriverGeoCell()
            != other.getDriverGeoCell()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getDriverId().hashCode();
        hash = (37 * hash) + DRIVER_GEO_CELL_FIELD_NUMBER;
        hash = (53 * hash) + getDriverGeoCell();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A message that is sent to the passenger, when there is a driver that 
       * is ready to pick them up.
       * </pre>
       *
       * Protobuf type {@code OutboundPassengerMessage.DriverHasBeenFound}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:OutboundPassengerMessage.DriverHasBeenFound)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFoundOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_DriverHasBeenFound_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_DriverHasBeenFound_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          driverId_ = "";

          driverGeoCell_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_DriverHasBeenFound_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound(this);
          result.driverId_ = driverId_;
          result.driverGeoCell_ = driverGeoCell_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance()) return this;
          if (!other.getDriverId().isEmpty()) {
            driverId_ = other.driverId_;
            onChanged();
          }
          if (other.getDriverGeoCell() != 0) {
            setDriverGeoCell(other.getDriverGeoCell());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object driverId_ = "";
        /**
         * <code>string driver_id = 2;</code>
         * @return The driverId.
         */
        public java.lang.String getDriverId() {
          java.lang.Object ref = driverId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            driverId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string driver_id = 2;</code>
         * @return The bytes for driverId.
         */
        public com.google.protobuf.ByteString
            getDriverIdBytes() {
          java.lang.Object ref = driverId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            driverId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string driver_id = 2;</code>
         * @param value The driverId to set.
         * @return This builder for chaining.
         */
        public Builder setDriverId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          driverId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string driver_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDriverId() {
          
          driverId_ = getDefaultInstance().getDriverId();
          onChanged();
          return this;
        }
        /**
         * <code>string driver_id = 2;</code>
         * @param value The bytes for driverId to set.
         * @return This builder for chaining.
         */
        public Builder setDriverIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          driverId_ = value;
          onChanged();
          return this;
        }

        private int driverGeoCell_ ;
        /**
         * <code>int32 driver_geo_cell = 3;</code>
         * @return The driverGeoCell.
         */
        @java.lang.Override
        public int getDriverGeoCell() {
          return driverGeoCell_;
        }
        /**
         * <code>int32 driver_geo_cell = 3;</code>
         * @param value The driverGeoCell to set.
         * @return This builder for chaining.
         */
        public Builder setDriverGeoCell(int value) {
          
          driverGeoCell_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 driver_geo_cell = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearDriverGeoCell() {
          
          driverGeoCell_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:OutboundPassengerMessage.DriverHasBeenFound)
      }

      // @@protoc_insertion_point(class_scope:OutboundPassengerMessage.DriverHasBeenFound)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DriverHasBeenFound>
          PARSER = new com.google.protobuf.AbstractParser<DriverHasBeenFound>() {
        @java.lang.Override
        public DriverHasBeenFound parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DriverHasBeenFound(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<DriverHasBeenFound> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DriverHasBeenFound> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RideFailedOrBuilder extends
        // @@protoc_insertion_point(interface_extends:OutboundPassengerMessage.RideFailed)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string ride_id = 2;</code>
       * @return The rideId.
       */
      java.lang.String getRideId();
      /**
       * <code>string ride_id = 2;</code>
       * @return The bytes for rideId.
       */
      com.google.protobuf.ByteString
          getRideIdBytes();
    }
    /**
     * <pre>
     * A message that is sent to the passenger when the system couldn't find in reasonable time
     * a driver to pickup the passenger.
     * </pre>
     *
     * Protobuf type {@code OutboundPassengerMessage.RideFailed}
     */
    public static final class RideFailed extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:OutboundPassengerMessage.RideFailed)
        RideFailedOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RideFailed.newBuilder() to construct.
      private RideFailed(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RideFailed() {
        rideId_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RideFailed();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RideFailed(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                rideId_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideFailed_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideFailed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder.class);
      }

      public static final int RIDE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object rideId_;
      /**
       * <code>string ride_id = 2;</code>
       * @return The rideId.
       */
      @java.lang.Override
      public java.lang.String getRideId() {
        java.lang.Object ref = rideId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          rideId_ = s;
          return s;
        }
      }
      /**
       * <code>string ride_id = 2;</code>
       * @return The bytes for rideId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRideIdBytes() {
        java.lang.Object ref = rideId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rideId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getRideIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, rideId_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getRideIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, rideId_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) obj;

        if (!getRideId()
            .equals(other.getRideId())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + RIDE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRideId().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A message that is sent to the passenger when the system couldn't find in reasonable time
       * a driver to pickup the passenger.
       * </pre>
       *
       * Protobuf type {@code OutboundPassengerMessage.RideFailed}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:OutboundPassengerMessage.RideFailed)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailedOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideFailed_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideFailed_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          rideId_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideFailed_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed(this);
          result.rideId_ = rideId_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance()) return this;
          if (!other.getRideId().isEmpty()) {
            rideId_ = other.rideId_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object rideId_ = "";
        /**
         * <code>string ride_id = 2;</code>
         * @return The rideId.
         */
        public java.lang.String getRideId() {
          java.lang.Object ref = rideId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            rideId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string ride_id = 2;</code>
         * @return The bytes for rideId.
         */
        public com.google.protobuf.ByteString
            getRideIdBytes() {
          java.lang.Object ref = rideId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            rideId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string ride_id = 2;</code>
         * @param value The rideId to set.
         * @return This builder for chaining.
         */
        public Builder setRideId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          rideId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string ride_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearRideId() {
          
          rideId_ = getDefaultInstance().getRideId();
          onChanged();
          return this;
        }
        /**
         * <code>string ride_id = 2;</code>
         * @param value The bytes for rideId to set.
         * @return This builder for chaining.
         */
        public Builder setRideIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          rideId_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:OutboundPassengerMessage.RideFailed)
      }

      // @@protoc_insertion_point(class_scope:OutboundPassengerMessage.RideFailed)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RideFailed>
          PARSER = new com.google.protobuf.AbstractParser<RideFailed>() {
        @java.lang.Override
        public RideFailed parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RideFailed(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RideFailed> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RideFailed> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RideStartedOrBuilder extends
        // @@protoc_insertion_point(interface_extends:OutboundPassengerMessage.RideStarted)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string driver_id = 2;</code>
       * @return The driverId.
       */
      java.lang.String getDriverId();
      /**
       * <code>string driver_id = 2;</code>
       * @return The bytes for driverId.
       */
      com.google.protobuf.ByteString
          getDriverIdBytes();
    }
    /**
     * <pre>
     * A notification that is sent to the passenger indicating that the ride has started.
     * </pre>
     *
     * Protobuf type {@code OutboundPassengerMessage.RideStarted}
     */
    public static final class RideStarted extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:OutboundPassengerMessage.RideStarted)
        RideStartedOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RideStarted.newBuilder() to construct.
      private RideStarted(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RideStarted() {
        driverId_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RideStarted();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RideStarted(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                driverId_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideStarted_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideStarted_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder.class);
      }

      public static final int DRIVER_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object driverId_;
      /**
       * <code>string driver_id = 2;</code>
       * @return The driverId.
       */
      @java.lang.Override
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        }
      }
      /**
       * <code>string driver_id = 2;</code>
       * @return The bytes for driverId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getDriverIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, driverId_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getDriverIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, driverId_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) obj;

        if (!getDriverId()
            .equals(other.getDriverId())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getDriverId().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A notification that is sent to the passenger indicating that the ride has started.
       * </pre>
       *
       * Protobuf type {@code OutboundPassengerMessage.RideStarted}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:OutboundPassengerMessage.RideStarted)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStartedOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideStarted_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideStarted_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          driverId_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideStarted_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted(this);
          result.driverId_ = driverId_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance()) return this;
          if (!other.getDriverId().isEmpty()) {
            driverId_ = other.driverId_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object driverId_ = "";
        /**
         * <code>string driver_id = 2;</code>
         * @return The driverId.
         */
        public java.lang.String getDriverId() {
          java.lang.Object ref = driverId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            driverId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string driver_id = 2;</code>
         * @return The bytes for driverId.
         */
        public com.google.protobuf.ByteString
            getDriverIdBytes() {
          java.lang.Object ref = driverId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            driverId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string driver_id = 2;</code>
         * @param value The driverId to set.
         * @return This builder for chaining.
         */
        public Builder setDriverId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          driverId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string driver_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDriverId() {
          
          driverId_ = getDefaultInstance().getDriverId();
          onChanged();
          return this;
        }
        /**
         * <code>string driver_id = 2;</code>
         * @param value The bytes for driverId to set.
         * @return This builder for chaining.
         */
        public Builder setDriverIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          driverId_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:OutboundPassengerMessage.RideStarted)
      }

      // @@protoc_insertion_point(class_scope:OutboundPassengerMessage.RideStarted)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RideStarted>
          PARSER = new com.google.protobuf.AbstractParser<RideStarted>() {
        @java.lang.Override
        public RideStarted parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RideStarted(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RideStarted> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RideStarted> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RideEndedOrBuilder extends
        // @@protoc_insertion_point(interface_extends:OutboundPassengerMessage.RideEnded)
        com.google.protobuf.MessageOrBuilder {
    }
    /**
     * <pre>
     * A notification that is sent to the passenger indicating that the ride has end.
     * </pre>
     *
     * Protobuf type {@code OutboundPassengerMessage.RideEnded}
     */
    public static final class RideEnded extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:OutboundPassengerMessage.RideEnded)
        RideEndedOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RideEnded.newBuilder() to construct.
      private RideEnded(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RideEnded() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RideEnded();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RideEnded(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideEnded_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideEnded_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder.class);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) obj;

        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A notification that is sent to the passenger indicating that the ride has end.
       * </pre>
       *
       * Protobuf type {@code OutboundPassengerMessage.RideEnded}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:OutboundPassengerMessage.RideEnded)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEndedOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideEnded_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideEnded_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_RideEnded_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded(this);
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance()) return this;
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:OutboundPassengerMessage.RideEnded)
      }

      // @@protoc_insertion_point(class_scope:OutboundPassengerMessage.RideEnded)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RideEnded>
          PARSER = new com.google.protobuf.AbstractParser<RideEnded>() {
        @java.lang.Override
        public RideEnded parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RideEnded(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RideEnded> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RideEnded> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int messageCase_ = 0;
    private java.lang.Object message_;
    public enum MessageCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      DRIVER_FOUND(2),
      RIDE_FAILED(3),
      RIDE_STARTED(4),
      RIDE_ENDED(5),
      MESSAGE_NOT_SET(0);
      private final int value;
      private MessageCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MessageCase valueOf(int value) {
        return forNumber(value);
      }

      public static MessageCase forNumber(int value) {
        switch (value) {
          case 2: return DRIVER_FOUND;
          case 3: return RIDE_FAILED;
          case 4: return RIDE_STARTED;
          case 5: return RIDE_ENDED;
          case 0: return MESSAGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MessageCase
    getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public static final int PASSENGER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object passengerId_;
    /**
     * <code>string passenger_id = 1;</code>
     * @return The passengerId.
     */
    @java.lang.Override
    public java.lang.String getPassengerId() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        passengerId_ = s;
        return s;
      }
    }
    /**
     * <code>string passenger_id = 1;</code>
     * @return The bytes for passengerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPassengerIdBytes() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        passengerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DRIVER_FOUND_FIELD_NUMBER = 2;
    /**
     * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
     * @return Whether the driverFound field is set.
     */
    @java.lang.Override
    public boolean hasDriverFound() {
      return messageCase_ == 2;
    }
    /**
     * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
     * @return The driverFound.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound getDriverFound() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance();
    }
    /**
     * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFoundOrBuilder getDriverFoundOrBuilder() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance();
    }

    public static final int RIDE_FAILED_FIELD_NUMBER = 3;
    /**
     * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
     * @return Whether the rideFailed field is set.
     */
    @java.lang.Override
    public boolean hasRideFailed() {
      return messageCase_ == 3;
    }
    /**
     * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
     * @return The rideFailed.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed getRideFailed() {
      if (messageCase_ == 3) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance();
    }
    /**
     * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailedOrBuilder getRideFailedOrBuilder() {
      if (messageCase_ == 3) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance();
    }

    public static final int RIDE_STARTED_FIELD_NUMBER = 4;
    /**
     * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
     * @return Whether the rideStarted field is set.
     */
    @java.lang.Override
    public boolean hasRideStarted() {
      return messageCase_ == 4;
    }
    /**
     * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
     * @return The rideStarted.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted getRideStarted() {
      if (messageCase_ == 4) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance();
    }
    /**
     * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStartedOrBuilder getRideStartedOrBuilder() {
      if (messageCase_ == 4) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance();
    }

    public static final int RIDE_ENDED_FIELD_NUMBER = 5;
    /**
     * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
     * @return Whether the rideEnded field is set.
     */
    @java.lang.Override
    public boolean hasRideEnded() {
      return messageCase_ == 5;
    }
    /**
     * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
     * @return The rideEnded.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded getRideEnded() {
      if (messageCase_ == 5) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance();
    }
    /**
     * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEndedOrBuilder getRideEndedOrBuilder() {
      if (messageCase_ == 5) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getPassengerIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, passengerId_);
      }
      if (messageCase_ == 2) {
        output.writeMessage(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_);
      }
      if (messageCase_ == 3) {
        output.writeMessage(3, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_);
      }
      if (messageCase_ == 4) {
        output.writeMessage(4, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_);
      }
      if (messageCase_ == 5) {
        output.writeMessage(5, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getPassengerIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, passengerId_);
      }
      if (messageCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_);
      }
      if (messageCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_);
      }
      if (messageCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_);
      }
      if (messageCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage) obj;

      if (!getPassengerId()
          .equals(other.getPassengerId())) return false;
      if (!getMessageCase().equals(other.getMessageCase())) return false;
      switch (messageCase_) {
        case 2:
          if (!getDriverFound()
              .equals(other.getDriverFound())) return false;
          break;
        case 3:
          if (!getRideFailed()
              .equals(other.getRideFailed())) return false;
          break;
        case 4:
          if (!getRideStarted()
              .equals(other.getRideStarted())) return false;
          break;
        case 5:
          if (!getRideEnded()
              .equals(other.getRideEnded())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PASSENGER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getPassengerId().hashCode();
      switch (messageCase_) {
        case 2:
          hash = (37 * hash) + DRIVER_FOUND_FIELD_NUMBER;
          hash = (53 * hash) + getDriverFound().hashCode();
          break;
        case 3:
          hash = (37 * hash) + RIDE_FAILED_FIELD_NUMBER;
          hash = (53 * hash) + getRideFailed().hashCode();
          break;
        case 4:
          hash = (37 * hash) + RIDE_STARTED_FIELD_NUMBER;
          hash = (53 * hash) + getRideStarted().hashCode();
          break;
        case 5:
          hash = (37 * hash) + RIDE_ENDED_FIELD_NUMBER;
          hash = (53 * hash) + getRideEnded().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * the messages that corresponds to the TO_PASSENGER_EGRESS
     * </pre>
     *
     * Protobuf type {@code OutboundPassengerMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:OutboundPassengerMessage)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        passengerId_ = "";

        messageCase_ = 0;
        message_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundPassengerMessage_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage(this);
        result.passengerId_ = passengerId_;
        if (messageCase_ == 2) {
          if (driverFoundBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = driverFoundBuilder_.build();
          }
        }
        if (messageCase_ == 3) {
          if (rideFailedBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = rideFailedBuilder_.build();
          }
        }
        if (messageCase_ == 4) {
          if (rideStartedBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = rideStartedBuilder_.build();
          }
        }
        if (messageCase_ == 5) {
          if (rideEndedBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = rideEndedBuilder_.build();
          }
        }
        result.messageCase_ = messageCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.getDefaultInstance()) return this;
        if (!other.getPassengerId().isEmpty()) {
          passengerId_ = other.passengerId_;
          onChanged();
        }
        switch (other.getMessageCase()) {
          case DRIVER_FOUND: {
            mergeDriverFound(other.getDriverFound());
            break;
          }
          case RIDE_FAILED: {
            mergeRideFailed(other.getRideFailed());
            break;
          }
          case RIDE_STARTED: {
            mergeRideStarted(other.getRideStarted());
            break;
          }
          case RIDE_ENDED: {
            mergeRideEnded(other.getRideEnded());
            break;
          }
          case MESSAGE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int messageCase_ = 0;
      private java.lang.Object message_;
      public MessageCase
          getMessageCase() {
        return MessageCase.forNumber(
            messageCase_);
      }

      public Builder clearMessage() {
        messageCase_ = 0;
        message_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object passengerId_ = "";
      /**
       * <code>string passenger_id = 1;</code>
       * @return The passengerId.
       */
      public java.lang.String getPassengerId() {
        java.lang.Object ref = passengerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          passengerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @return The bytes for passengerId.
       */
      public com.google.protobuf.ByteString
          getPassengerIdBytes() {
        java.lang.Object ref = passengerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passengerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @param value The passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        passengerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerId() {
        
        passengerId_ = getDefaultInstance().getPassengerId();
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @param value The bytes for passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        passengerId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFoundOrBuilder> driverFoundBuilder_;
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       * @return Whether the driverFound field is set.
       */
      @java.lang.Override
      public boolean hasDriverFound() {
        return messageCase_ == 2;
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       * @return The driverFound.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound getDriverFound() {
        if (driverFoundBuilder_ == null) {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance();
        } else {
          if (messageCase_ == 2) {
            return driverFoundBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       */
      public Builder setDriverFound(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound value) {
        if (driverFoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          driverFoundBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       */
      public Builder setDriverFound(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder builderForValue) {
        if (driverFoundBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          driverFoundBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       */
      public Builder mergeDriverFound(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound value) {
        if (driverFoundBuilder_ == null) {
          if (messageCase_ == 2 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 2) {
            driverFoundBuilder_.mergeFrom(value);
          }
          driverFoundBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       */
      public Builder clearDriverFound() {
        if (driverFoundBuilder_ == null) {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
          }
          driverFoundBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder getDriverFoundBuilder() {
        return getDriverFoundFieldBuilder().getBuilder();
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFoundOrBuilder getDriverFoundOrBuilder() {
        if ((messageCase_ == 2) && (driverFoundBuilder_ != null)) {
          return driverFoundBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.DriverHasBeenFound driver_found = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFoundOrBuilder> 
          getDriverFoundFieldBuilder() {
        if (driverFoundBuilder_ == null) {
          if (!(messageCase_ == 2)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.getDefaultInstance();
          }
          driverFoundBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFoundOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.DriverHasBeenFound) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 2;
        onChanged();;
        return driverFoundBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailedOrBuilder> rideFailedBuilder_;
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       * @return Whether the rideFailed field is set.
       */
      @java.lang.Override
      public boolean hasRideFailed() {
        return messageCase_ == 3;
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       * @return The rideFailed.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed getRideFailed() {
        if (rideFailedBuilder_ == null) {
          if (messageCase_ == 3) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance();
        } else {
          if (messageCase_ == 3) {
            return rideFailedBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       */
      public Builder setRideFailed(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed value) {
        if (rideFailedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          rideFailedBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       */
      public Builder setRideFailed(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder builderForValue) {
        if (rideFailedBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          rideFailedBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       */
      public Builder mergeRideFailed(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed value) {
        if (rideFailedBuilder_ == null) {
          if (messageCase_ == 3 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 3) {
            rideFailedBuilder_.mergeFrom(value);
          }
          rideFailedBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       */
      public Builder clearRideFailed() {
        if (rideFailedBuilder_ == null) {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
          }
          rideFailedBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder getRideFailedBuilder() {
        return getRideFailedFieldBuilder().getBuilder();
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailedOrBuilder getRideFailedOrBuilder() {
        if ((messageCase_ == 3) && (rideFailedBuilder_ != null)) {
          return rideFailedBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 3) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.RideFailed ride_failed = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailedOrBuilder> 
          getRideFailedFieldBuilder() {
        if (rideFailedBuilder_ == null) {
          if (!(messageCase_ == 3)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.getDefaultInstance();
          }
          rideFailedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailedOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideFailed) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 3;
        onChanged();;
        return rideFailedBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStartedOrBuilder> rideStartedBuilder_;
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       * @return Whether the rideStarted field is set.
       */
      @java.lang.Override
      public boolean hasRideStarted() {
        return messageCase_ == 4;
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       * @return The rideStarted.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted getRideStarted() {
        if (rideStartedBuilder_ == null) {
          if (messageCase_ == 4) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance();
        } else {
          if (messageCase_ == 4) {
            return rideStartedBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       */
      public Builder setRideStarted(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted value) {
        if (rideStartedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          rideStartedBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       */
      public Builder setRideStarted(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder builderForValue) {
        if (rideStartedBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          rideStartedBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       */
      public Builder mergeRideStarted(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted value) {
        if (rideStartedBuilder_ == null) {
          if (messageCase_ == 4 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 4) {
            rideStartedBuilder_.mergeFrom(value);
          }
          rideStartedBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       */
      public Builder clearRideStarted() {
        if (rideStartedBuilder_ == null) {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
          }
          rideStartedBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder getRideStartedBuilder() {
        return getRideStartedFieldBuilder().getBuilder();
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStartedOrBuilder getRideStartedOrBuilder() {
        if ((messageCase_ == 4) && (rideStartedBuilder_ != null)) {
          return rideStartedBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 4) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.RideStarted ride_started = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStartedOrBuilder> 
          getRideStartedFieldBuilder() {
        if (rideStartedBuilder_ == null) {
          if (!(messageCase_ == 4)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.getDefaultInstance();
          }
          rideStartedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStartedOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideStarted) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 4;
        onChanged();;
        return rideStartedBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEndedOrBuilder> rideEndedBuilder_;
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       * @return Whether the rideEnded field is set.
       */
      @java.lang.Override
      public boolean hasRideEnded() {
        return messageCase_ == 5;
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       * @return The rideEnded.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded getRideEnded() {
        if (rideEndedBuilder_ == null) {
          if (messageCase_ == 5) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance();
        } else {
          if (messageCase_ == 5) {
            return rideEndedBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       */
      public Builder setRideEnded(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded value) {
        if (rideEndedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          rideEndedBuilder_.setMessage(value);
        }
        messageCase_ = 5;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       */
      public Builder setRideEnded(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder builderForValue) {
        if (rideEndedBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          rideEndedBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 5;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       */
      public Builder mergeRideEnded(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded value) {
        if (rideEndedBuilder_ == null) {
          if (messageCase_ == 5 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 5) {
            rideEndedBuilder_.mergeFrom(value);
          }
          rideEndedBuilder_.setMessage(value);
        }
        messageCase_ = 5;
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       */
      public Builder clearRideEnded() {
        if (rideEndedBuilder_ == null) {
          if (messageCase_ == 5) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 5) {
            messageCase_ = 0;
            message_ = null;
          }
          rideEndedBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder getRideEndedBuilder() {
        return getRideEndedFieldBuilder().getBuilder();
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEndedOrBuilder getRideEndedOrBuilder() {
        if ((messageCase_ == 5) && (rideEndedBuilder_ != null)) {
          return rideEndedBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 5) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundPassengerMessage.RideEnded ride_ended = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEndedOrBuilder> 
          getRideEndedFieldBuilder() {
        if (rideEndedBuilder_ == null) {
          if (!(messageCase_ == 5)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.getDefaultInstance();
          }
          rideEndedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEndedOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage.RideEnded) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 5;
        onChanged();;
        return rideEndedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:OutboundPassengerMessage)
    }

    // @@protoc_insertion_point(class_scope:OutboundPassengerMessage)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OutboundPassengerMessage>
        PARSER = new com.google.protobuf.AbstractParser<OutboundPassengerMessage>() {
      @java.lang.Override
      public OutboundPassengerMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutboundPassengerMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OutboundPassengerMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OutboundPassengerMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundPassengerMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InboundDriverMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:InboundDriverMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    java.lang.String getDriverId();
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes();

    /**
     * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
     * @return Whether the rideStarted field is set.
     */
    boolean hasRideStarted();
    /**
     * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
     * @return The rideStarted.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted getRideStarted();
    /**
     * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStartedOrBuilder getRideStartedOrBuilder();

    /**
     * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
     * @return Whether the rideEnded field is set.
     */
    boolean hasRideEnded();
    /**
     * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
     * @return The rideEnded.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded getRideEnded();
    /**
     * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEndedOrBuilder getRideEndedOrBuilder();

    /**
     * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
     * @return Whether the locationUpdate field is set.
     */
    boolean hasLocationUpdate();
    /**
     * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
     * @return The locationUpdate.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate getLocationUpdate();
    /**
     * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdateOrBuilder getLocationUpdateOrBuilder();

    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.MessageCase getMessageCase();
  }
  /**
   * <pre>
   * the messages that corresponds to the FROM_DRIVER_INGRESS
   * </pre>
   *
   * Protobuf type {@code InboundDriverMessage}
   */
  public static final class InboundDriverMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:InboundDriverMessage)
      InboundDriverMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InboundDriverMessage.newBuilder() to construct.
    private InboundDriverMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InboundDriverMessage() {
      driverId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InboundDriverMessage();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InboundDriverMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              driverId_ = s;
              break;
            }
            case 18: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder subBuilder = null;
              if (messageCase_ == 2) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 2;
              break;
            }
            case 26: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder subBuilder = null;
              if (messageCase_ == 3) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 3;
              break;
            }
            case 34: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder subBuilder = null;
              if (messageCase_ == 4) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 4;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.Builder.class);
    }

    public interface RideStartedOrBuilder extends
        // @@protoc_insertion_point(interface_extends:InboundDriverMessage.RideStarted)
        com.google.protobuf.MessageOrBuilder {
    }
    /**
     * <pre>
     * A message the driver sends once they pickup the passenger
     * </pre>
     *
     * Protobuf type {@code InboundDriverMessage.RideStarted}
     */
    public static final class RideStarted extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:InboundDriverMessage.RideStarted)
        RideStartedOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RideStarted.newBuilder() to construct.
      private RideStarted(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RideStarted() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RideStarted();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RideStarted(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideStarted_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideStarted_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder.class);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) obj;

        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A message the driver sends once they pickup the passenger
       * </pre>
       *
       * Protobuf type {@code InboundDriverMessage.RideStarted}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:InboundDriverMessage.RideStarted)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStartedOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideStarted_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideStarted_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideStarted_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted(this);
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance()) return this;
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:InboundDriverMessage.RideStarted)
      }

      // @@protoc_insertion_point(class_scope:InboundDriverMessage.RideStarted)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RideStarted>
          PARSER = new com.google.protobuf.AbstractParser<RideStarted>() {
        @java.lang.Override
        public RideStarted parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RideStarted(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RideStarted> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RideStarted> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RideEndedOrBuilder extends
        // @@protoc_insertion_point(interface_extends:InboundDriverMessage.RideEnded)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string ride_id = 2;</code>
       * @return The rideId.
       */
      java.lang.String getRideId();
      /**
       * <code>string ride_id = 2;</code>
       * @return The bytes for rideId.
       */
      com.google.protobuf.ByteString
          getRideIdBytes();
    }
    /**
     * <pre>
     * A message the driver sends when they drop off the passenger.
     * </pre>
     *
     * Protobuf type {@code InboundDriverMessage.RideEnded}
     */
    public static final class RideEnded extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:InboundDriverMessage.RideEnded)
        RideEndedOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RideEnded.newBuilder() to construct.
      private RideEnded(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RideEnded() {
        rideId_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RideEnded();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RideEnded(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                rideId_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideEnded_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideEnded_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder.class);
      }

      public static final int RIDE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object rideId_;
      /**
       * <code>string ride_id = 2;</code>
       * @return The rideId.
       */
      @java.lang.Override
      public java.lang.String getRideId() {
        java.lang.Object ref = rideId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          rideId_ = s;
          return s;
        }
      }
      /**
       * <code>string ride_id = 2;</code>
       * @return The bytes for rideId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRideIdBytes() {
        java.lang.Object ref = rideId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rideId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getRideIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, rideId_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getRideIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, rideId_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) obj;

        if (!getRideId()
            .equals(other.getRideId())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + RIDE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRideId().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A message the driver sends when they drop off the passenger.
       * </pre>
       *
       * Protobuf type {@code InboundDriverMessage.RideEnded}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:InboundDriverMessage.RideEnded)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEndedOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideEnded_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideEnded_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          rideId_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_RideEnded_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded(this);
          result.rideId_ = rideId_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance()) return this;
          if (!other.getRideId().isEmpty()) {
            rideId_ = other.rideId_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object rideId_ = "";
        /**
         * <code>string ride_id = 2;</code>
         * @return The rideId.
         */
        public java.lang.String getRideId() {
          java.lang.Object ref = rideId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            rideId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string ride_id = 2;</code>
         * @return The bytes for rideId.
         */
        public com.google.protobuf.ByteString
            getRideIdBytes() {
          java.lang.Object ref = rideId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            rideId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string ride_id = 2;</code>
         * @param value The rideId to set.
         * @return This builder for chaining.
         */
        public Builder setRideId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          rideId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string ride_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearRideId() {
          
          rideId_ = getDefaultInstance().getRideId();
          onChanged();
          return this;
        }
        /**
         * <code>string ride_id = 2;</code>
         * @param value The bytes for rideId to set.
         * @return This builder for chaining.
         */
        public Builder setRideIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          rideId_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:InboundDriverMessage.RideEnded)
      }

      // @@protoc_insertion_point(class_scope:InboundDriverMessage.RideEnded)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RideEnded>
          PARSER = new com.google.protobuf.AbstractParser<RideEnded>() {
        @java.lang.Override
        public RideEnded parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RideEnded(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RideEnded> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RideEnded> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface LocationUpdateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:InboundDriverMessage.LocationUpdate)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 current_geo_cell = 2;</code>
       * @return The currentGeoCell.
       */
      int getCurrentGeoCell();
    }
    /**
     * <pre>
     * A periodic location update message
     * </pre>
     *
     * Protobuf type {@code InboundDriverMessage.LocationUpdate}
     */
    public static final class LocationUpdate extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:InboundDriverMessage.LocationUpdate)
        LocationUpdateOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use LocationUpdate.newBuilder() to construct.
      private LocationUpdate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private LocationUpdate() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new LocationUpdate();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private LocationUpdate(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 16: {

                currentGeoCell_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_LocationUpdate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_LocationUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder.class);
      }

      public static final int CURRENT_GEO_CELL_FIELD_NUMBER = 2;
      private int currentGeoCell_;
      /**
       * <code>int32 current_geo_cell = 2;</code>
       * @return The currentGeoCell.
       */
      @java.lang.Override
      public int getCurrentGeoCell() {
        return currentGeoCell_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (currentGeoCell_ != 0) {
          output.writeInt32(2, currentGeoCell_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (currentGeoCell_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, currentGeoCell_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) obj;

        if (getCurrentGeoCell()
            != other.getCurrentGeoCell()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + CURRENT_GEO_CELL_FIELD_NUMBER;
        hash = (53 * hash) + getCurrentGeoCell();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A periodic location update message
       * </pre>
       *
       * Protobuf type {@code InboundDriverMessage.LocationUpdate}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:InboundDriverMessage.LocationUpdate)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_LocationUpdate_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_LocationUpdate_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          currentGeoCell_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_LocationUpdate_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate(this);
          result.currentGeoCell_ = currentGeoCell_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance()) return this;
          if (other.getCurrentGeoCell() != 0) {
            setCurrentGeoCell(other.getCurrentGeoCell());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int currentGeoCell_ ;
        /**
         * <code>int32 current_geo_cell = 2;</code>
         * @return The currentGeoCell.
         */
        @java.lang.Override
        public int getCurrentGeoCell() {
          return currentGeoCell_;
        }
        /**
         * <code>int32 current_geo_cell = 2;</code>
         * @param value The currentGeoCell to set.
         * @return This builder for chaining.
         */
        public Builder setCurrentGeoCell(int value) {
          
          currentGeoCell_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 current_geo_cell = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearCurrentGeoCell() {
          
          currentGeoCell_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:InboundDriverMessage.LocationUpdate)
      }

      // @@protoc_insertion_point(class_scope:InboundDriverMessage.LocationUpdate)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<LocationUpdate>
          PARSER = new com.google.protobuf.AbstractParser<LocationUpdate>() {
        @java.lang.Override
        public LocationUpdate parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new LocationUpdate(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<LocationUpdate> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<LocationUpdate> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int messageCase_ = 0;
    private java.lang.Object message_;
    public enum MessageCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      RIDE_STARTED(2),
      RIDE_ENDED(3),
      LOCATION_UPDATE(4),
      MESSAGE_NOT_SET(0);
      private final int value;
      private MessageCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MessageCase valueOf(int value) {
        return forNumber(value);
      }

      public static MessageCase forNumber(int value) {
        switch (value) {
          case 2: return RIDE_STARTED;
          case 3: return RIDE_ENDED;
          case 4: return LOCATION_UPDATE;
          case 0: return MESSAGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MessageCase
    getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object driverId_;
    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    @java.lang.Override
    public java.lang.String getDriverId() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        driverId_ = s;
        return s;
      }
    }
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDriverIdBytes() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        driverId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RIDE_STARTED_FIELD_NUMBER = 2;
    /**
     * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
     * @return Whether the rideStarted field is set.
     */
    @java.lang.Override
    public boolean hasRideStarted() {
      return messageCase_ == 2;
    }
    /**
     * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
     * @return The rideStarted.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted getRideStarted() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance();
    }
    /**
     * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStartedOrBuilder getRideStartedOrBuilder() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance();
    }

    public static final int RIDE_ENDED_FIELD_NUMBER = 3;
    /**
     * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
     * @return Whether the rideEnded field is set.
     */
    @java.lang.Override
    public boolean hasRideEnded() {
      return messageCase_ == 3;
    }
    /**
     * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
     * @return The rideEnded.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded getRideEnded() {
      if (messageCase_ == 3) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance();
    }
    /**
     * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEndedOrBuilder getRideEndedOrBuilder() {
      if (messageCase_ == 3) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance();
    }

    public static final int LOCATION_UPDATE_FIELD_NUMBER = 4;
    /**
     * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
     * @return Whether the locationUpdate field is set.
     */
    @java.lang.Override
    public boolean hasLocationUpdate() {
      return messageCase_ == 4;
    }
    /**
     * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
     * @return The locationUpdate.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate getLocationUpdate() {
      if (messageCase_ == 4) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance();
    }
    /**
     * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdateOrBuilder getLocationUpdateOrBuilder() {
      if (messageCase_ == 4) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDriverIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_);
      }
      if (messageCase_ == 2) {
        output.writeMessage(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_);
      }
      if (messageCase_ == 3) {
        output.writeMessage(3, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_);
      }
      if (messageCase_ == 4) {
        output.writeMessage(4, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDriverIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, driverId_);
      }
      if (messageCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_);
      }
      if (messageCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_);
      }
      if (messageCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage) obj;

      if (!getDriverId()
          .equals(other.getDriverId())) return false;
      if (!getMessageCase().equals(other.getMessageCase())) return false;
      switch (messageCase_) {
        case 2:
          if (!getRideStarted()
              .equals(other.getRideStarted())) return false;
          break;
        case 3:
          if (!getRideEnded()
              .equals(other.getRideEnded())) return false;
          break;
        case 4:
          if (!getLocationUpdate()
              .equals(other.getLocationUpdate())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDriverId().hashCode();
      switch (messageCase_) {
        case 2:
          hash = (37 * hash) + RIDE_STARTED_FIELD_NUMBER;
          hash = (53 * hash) + getRideStarted().hashCode();
          break;
        case 3:
          hash = (37 * hash) + RIDE_ENDED_FIELD_NUMBER;
          hash = (53 * hash) + getRideEnded().hashCode();
          break;
        case 4:
          hash = (37 * hash) + LOCATION_UPDATE_FIELD_NUMBER;
          hash = (53 * hash) + getLocationUpdate().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * the messages that corresponds to the FROM_DRIVER_INGRESS
     * </pre>
     *
     * Protobuf type {@code InboundDriverMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:InboundDriverMessage)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = "";

        messageCase_ = 0;
        message_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_InboundDriverMessage_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage(this);
        result.driverId_ = driverId_;
        if (messageCase_ == 2) {
          if (rideStartedBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = rideStartedBuilder_.build();
          }
        }
        if (messageCase_ == 3) {
          if (rideEndedBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = rideEndedBuilder_.build();
          }
        }
        if (messageCase_ == 4) {
          if (locationUpdateBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = locationUpdateBuilder_.build();
          }
        }
        result.messageCase_ = messageCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.getDefaultInstance()) return this;
        if (!other.getDriverId().isEmpty()) {
          driverId_ = other.driverId_;
          onChanged();
        }
        switch (other.getMessageCase()) {
          case RIDE_STARTED: {
            mergeRideStarted(other.getRideStarted());
            break;
          }
          case RIDE_ENDED: {
            mergeRideEnded(other.getRideEnded());
            break;
          }
          case LOCATION_UPDATE: {
            mergeLocationUpdate(other.getLocationUpdate());
            break;
          }
          case MESSAGE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int messageCase_ = 0;
      private java.lang.Object message_;
      public MessageCase
          getMessageCase() {
        return MessageCase.forNumber(
            messageCase_);
      }

      public Builder clearMessage() {
        messageCase_ = 0;
        message_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object driverId_ = "";
      /**
       * <code>string driver_id = 1;</code>
       * @return The driverId.
       */
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return The bytes for driverId.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        driverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        
        driverId_ = getDefaultInstance().getDriverId();
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The bytes for driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        driverId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStartedOrBuilder> rideStartedBuilder_;
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       * @return Whether the rideStarted field is set.
       */
      @java.lang.Override
      public boolean hasRideStarted() {
        return messageCase_ == 2;
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       * @return The rideStarted.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted getRideStarted() {
        if (rideStartedBuilder_ == null) {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance();
        } else {
          if (messageCase_ == 2) {
            return rideStartedBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       */
      public Builder setRideStarted(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted value) {
        if (rideStartedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          rideStartedBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       */
      public Builder setRideStarted(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder builderForValue) {
        if (rideStartedBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          rideStartedBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       */
      public Builder mergeRideStarted(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted value) {
        if (rideStartedBuilder_ == null) {
          if (messageCase_ == 2 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 2) {
            rideStartedBuilder_.mergeFrom(value);
          }
          rideStartedBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       */
      public Builder clearRideStarted() {
        if (rideStartedBuilder_ == null) {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
          }
          rideStartedBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder getRideStartedBuilder() {
        return getRideStartedFieldBuilder().getBuilder();
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStartedOrBuilder getRideStartedOrBuilder() {
        if ((messageCase_ == 2) && (rideStartedBuilder_ != null)) {
          return rideStartedBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundDriverMessage.RideStarted ride_started = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStartedOrBuilder> 
          getRideStartedFieldBuilder() {
        if (rideStartedBuilder_ == null) {
          if (!(messageCase_ == 2)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.getDefaultInstance();
          }
          rideStartedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStartedOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideStarted) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 2;
        onChanged();;
        return rideStartedBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEndedOrBuilder> rideEndedBuilder_;
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       * @return Whether the rideEnded field is set.
       */
      @java.lang.Override
      public boolean hasRideEnded() {
        return messageCase_ == 3;
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       * @return The rideEnded.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded getRideEnded() {
        if (rideEndedBuilder_ == null) {
          if (messageCase_ == 3) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance();
        } else {
          if (messageCase_ == 3) {
            return rideEndedBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       */
      public Builder setRideEnded(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded value) {
        if (rideEndedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          rideEndedBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       */
      public Builder setRideEnded(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder builderForValue) {
        if (rideEndedBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          rideEndedBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       */
      public Builder mergeRideEnded(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded value) {
        if (rideEndedBuilder_ == null) {
          if (messageCase_ == 3 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 3) {
            rideEndedBuilder_.mergeFrom(value);
          }
          rideEndedBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       */
      public Builder clearRideEnded() {
        if (rideEndedBuilder_ == null) {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
          }
          rideEndedBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder getRideEndedBuilder() {
        return getRideEndedFieldBuilder().getBuilder();
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEndedOrBuilder getRideEndedOrBuilder() {
        if ((messageCase_ == 3) && (rideEndedBuilder_ != null)) {
          return rideEndedBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 3) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundDriverMessage.RideEnded ride_ended = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEndedOrBuilder> 
          getRideEndedFieldBuilder() {
        if (rideEndedBuilder_ == null) {
          if (!(messageCase_ == 3)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.getDefaultInstance();
          }
          rideEndedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEndedOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.RideEnded) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 3;
        onChanged();;
        return rideEndedBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdateOrBuilder> locationUpdateBuilder_;
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       * @return Whether the locationUpdate field is set.
       */
      @java.lang.Override
      public boolean hasLocationUpdate() {
        return messageCase_ == 4;
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       * @return The locationUpdate.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate getLocationUpdate() {
        if (locationUpdateBuilder_ == null) {
          if (messageCase_ == 4) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance();
        } else {
          if (messageCase_ == 4) {
            return locationUpdateBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       */
      public Builder setLocationUpdate(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate value) {
        if (locationUpdateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          locationUpdateBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       */
      public Builder setLocationUpdate(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder builderForValue) {
        if (locationUpdateBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          locationUpdateBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       */
      public Builder mergeLocationUpdate(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate value) {
        if (locationUpdateBuilder_ == null) {
          if (messageCase_ == 4 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 4) {
            locationUpdateBuilder_.mergeFrom(value);
          }
          locationUpdateBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       */
      public Builder clearLocationUpdate() {
        if (locationUpdateBuilder_ == null) {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
          }
          locationUpdateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder getLocationUpdateBuilder() {
        return getLocationUpdateFieldBuilder().getBuilder();
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdateOrBuilder getLocationUpdateOrBuilder() {
        if ((messageCase_ == 4) && (locationUpdateBuilder_ != null)) {
          return locationUpdateBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 4) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance();
        }
      }
      /**
       * <code>.InboundDriverMessage.LocationUpdate location_update = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdateOrBuilder> 
          getLocationUpdateFieldBuilder() {
        if (locationUpdateBuilder_ == null) {
          if (!(messageCase_ == 4)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.getDefaultInstance();
          }
          locationUpdateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdateOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage.LocationUpdate) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 4;
        onChanged();;
        return locationUpdateBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:InboundDriverMessage)
    }

    // @@protoc_insertion_point(class_scope:InboundDriverMessage)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InboundDriverMessage>
        PARSER = new com.google.protobuf.AbstractParser<InboundDriverMessage>() {
      @java.lang.Override
      public InboundDriverMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InboundDriverMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InboundDriverMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InboundDriverMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.InboundDriverMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OutboundDriverMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:OutboundDriverMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    java.lang.String getDriverId();
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes();

    /**
     * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
     * @return Whether the pickupPassenger field is set.
     */
    boolean hasPickupPassenger();
    /**
     * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
     * @return The pickupPassenger.
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger getPickupPassenger();
    /**
     * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
     */
    org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassengerOrBuilder getPickupPassengerOrBuilder();

    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.MessageCase getMessageCase();
  }
  /**
   * <pre>
   * the messages that corresponds to the TO_DRIVER_EGRESS
   * </pre>
   *
   * Protobuf type {@code OutboundDriverMessage}
   */
  public static final class OutboundDriverMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:OutboundDriverMessage)
      OutboundDriverMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OutboundDriverMessage.newBuilder() to construct.
    private OutboundDriverMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OutboundDriverMessage() {
      driverId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OutboundDriverMessage();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OutboundDriverMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              driverId_ = s;
              break;
            }
            case 18: {
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder subBuilder = null;
              if (messageCase_ == 2) {
                subBuilder = ((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_).toBuilder();
              }
              message_ =
                  input.readMessage(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 2;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.Builder.class);
    }

    public interface PickupPassengerOrBuilder extends
        // @@protoc_insertion_point(interface_extends:OutboundDriverMessage.PickupPassenger)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string ride_id = 2;</code>
       * @return The rideId.
       */
      java.lang.String getRideId();
      /**
       * <code>string ride_id = 2;</code>
       * @return The bytes for rideId.
       */
      com.google.protobuf.ByteString
          getRideIdBytes();

      /**
       * <code>int32 start_geo_location = 3;</code>
       * @return The startGeoLocation.
       */
      int getStartGeoLocation();

      /**
       * <code>int32 end_geo_location = 4;</code>
       * @return The endGeoLocation.
       */
      int getEndGeoLocation();
    }
    /**
     * <pre>
     * A message that is sent to the physical driver to indicate that
     * a pickup is needed.
     * a pickup is needed.
     * </pre>
     *
     * Protobuf type {@code OutboundDriverMessage.PickupPassenger}
     */
    public static final class PickupPassenger extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:OutboundDriverMessage.PickupPassenger)
        PickupPassengerOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use PickupPassenger.newBuilder() to construct.
      private PickupPassenger(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private PickupPassenger() {
        rideId_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new PickupPassenger();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private PickupPassenger(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                rideId_ = s;
                break;
              }
              case 24: {

                startGeoLocation_ = input.readInt32();
                break;
              }
              case 32: {

                endGeoLocation_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_PickupPassenger_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_PickupPassenger_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder.class);
      }

      public static final int RIDE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object rideId_;
      /**
       * <code>string ride_id = 2;</code>
       * @return The rideId.
       */
      @java.lang.Override
      public java.lang.String getRideId() {
        java.lang.Object ref = rideId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          rideId_ = s;
          return s;
        }
      }
      /**
       * <code>string ride_id = 2;</code>
       * @return The bytes for rideId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRideIdBytes() {
        java.lang.Object ref = rideId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rideId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int START_GEO_LOCATION_FIELD_NUMBER = 3;
      private int startGeoLocation_;
      /**
       * <code>int32 start_geo_location = 3;</code>
       * @return The startGeoLocation.
       */
      @java.lang.Override
      public int getStartGeoLocation() {
        return startGeoLocation_;
      }

      public static final int END_GEO_LOCATION_FIELD_NUMBER = 4;
      private int endGeoLocation_;
      /**
       * <code>int32 end_geo_location = 4;</code>
       * @return The endGeoLocation.
       */
      @java.lang.Override
      public int getEndGeoLocation() {
        return endGeoLocation_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getRideIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, rideId_);
        }
        if (startGeoLocation_ != 0) {
          output.writeInt32(3, startGeoLocation_);
        }
        if (endGeoLocation_ != 0) {
          output.writeInt32(4, endGeoLocation_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getRideIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, rideId_);
        }
        if (startGeoLocation_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, startGeoLocation_);
        }
        if (endGeoLocation_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, endGeoLocation_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger)) {
          return super.equals(obj);
        }
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) obj;

        if (!getRideId()
            .equals(other.getRideId())) return false;
        if (getStartGeoLocation()
            != other.getStartGeoLocation()) return false;
        if (getEndGeoLocation()
            != other.getEndGeoLocation()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + RIDE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRideId().hashCode();
        hash = (37 * hash) + START_GEO_LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getStartGeoLocation();
        hash = (37 * hash) + END_GEO_LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getEndGeoLocation();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A message that is sent to the physical driver to indicate that
       * a pickup is needed.
       * a pickup is needed.
       * </pre>
       *
       * Protobuf type {@code OutboundDriverMessage.PickupPassenger}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:OutboundDriverMessage.PickupPassenger)
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassengerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_PickupPassenger_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_PickupPassenger_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder.class);
        }

        // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          rideId_ = "";

          startGeoLocation_ = 0;

          endGeoLocation_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_PickupPassenger_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger getDefaultInstanceForType() {
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger build() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger buildPartial() {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger(this);
          result.rideId_ = rideId_;
          result.startGeoLocation_ = startGeoLocation_;
          result.endGeoLocation_ = endGeoLocation_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) {
            return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger other) {
          if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance()) return this;
          if (!other.getRideId().isEmpty()) {
            rideId_ = other.rideId_;
            onChanged();
          }
          if (other.getStartGeoLocation() != 0) {
            setStartGeoLocation(other.getStartGeoLocation());
          }
          if (other.getEndGeoLocation() != 0) {
            setEndGeoLocation(other.getEndGeoLocation());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object rideId_ = "";
        /**
         * <code>string ride_id = 2;</code>
         * @return The rideId.
         */
        public java.lang.String getRideId() {
          java.lang.Object ref = rideId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            rideId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string ride_id = 2;</code>
         * @return The bytes for rideId.
         */
        public com.google.protobuf.ByteString
            getRideIdBytes() {
          java.lang.Object ref = rideId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            rideId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string ride_id = 2;</code>
         * @param value The rideId to set.
         * @return This builder for chaining.
         */
        public Builder setRideId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          rideId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string ride_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearRideId() {
          
          rideId_ = getDefaultInstance().getRideId();
          onChanged();
          return this;
        }
        /**
         * <code>string ride_id = 2;</code>
         * @param value The bytes for rideId to set.
         * @return This builder for chaining.
         */
        public Builder setRideIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          rideId_ = value;
          onChanged();
          return this;
        }

        private int startGeoLocation_ ;
        /**
         * <code>int32 start_geo_location = 3;</code>
         * @return The startGeoLocation.
         */
        @java.lang.Override
        public int getStartGeoLocation() {
          return startGeoLocation_;
        }
        /**
         * <code>int32 start_geo_location = 3;</code>
         * @param value The startGeoLocation to set.
         * @return This builder for chaining.
         */
        public Builder setStartGeoLocation(int value) {
          
          startGeoLocation_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 start_geo_location = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearStartGeoLocation() {
          
          startGeoLocation_ = 0;
          onChanged();
          return this;
        }

        private int endGeoLocation_ ;
        /**
         * <code>int32 end_geo_location = 4;</code>
         * @return The endGeoLocation.
         */
        @java.lang.Override
        public int getEndGeoLocation() {
          return endGeoLocation_;
        }
        /**
         * <code>int32 end_geo_location = 4;</code>
         * @param value The endGeoLocation to set.
         * @return This builder for chaining.
         */
        public Builder setEndGeoLocation(int value) {
          
          endGeoLocation_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 end_geo_location = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearEndGeoLocation() {
          
          endGeoLocation_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:OutboundDriverMessage.PickupPassenger)
      }

      // @@protoc_insertion_point(class_scope:OutboundDriverMessage.PickupPassenger)
      private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger();
      }

      public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<PickupPassenger>
          PARSER = new com.google.protobuf.AbstractParser<PickupPassenger>() {
        @java.lang.Override
        public PickupPassenger parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new PickupPassenger(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<PickupPassenger> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<PickupPassenger> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int messageCase_ = 0;
    private java.lang.Object message_;
    public enum MessageCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      PICKUP_PASSENGER(2),
      MESSAGE_NOT_SET(0);
      private final int value;
      private MessageCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MessageCase valueOf(int value) {
        return forNumber(value);
      }

      public static MessageCase forNumber(int value) {
        switch (value) {
          case 2: return PICKUP_PASSENGER;
          case 0: return MESSAGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MessageCase
    getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object driverId_;
    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    @java.lang.Override
    public java.lang.String getDriverId() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        driverId_ = s;
        return s;
      }
    }
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDriverIdBytes() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        driverId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PICKUP_PASSENGER_FIELD_NUMBER = 2;
    /**
     * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
     * @return Whether the pickupPassenger field is set.
     */
    @java.lang.Override
    public boolean hasPickupPassenger() {
      return messageCase_ == 2;
    }
    /**
     * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
     * @return The pickupPassenger.
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger getPickupPassenger() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance();
    }
    /**
     * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassengerOrBuilder getPickupPassengerOrBuilder() {
      if (messageCase_ == 2) {
         return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_;
      }
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDriverIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_);
      }
      if (messageCase_ == 2) {
        output.writeMessage(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDriverIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, driverId_);
      }
      if (messageCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage) obj;

      if (!getDriverId()
          .equals(other.getDriverId())) return false;
      if (!getMessageCase().equals(other.getMessageCase())) return false;
      switch (messageCase_) {
        case 2:
          if (!getPickupPassenger()
              .equals(other.getPickupPassenger())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDriverId().hashCode();
      switch (messageCase_) {
        case 2:
          hash = (37 * hash) + PICKUP_PASSENGER_FIELD_NUMBER;
          hash = (53 * hash) + getPickupPassenger().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * the messages that corresponds to the TO_DRIVER_EGRESS
     * </pre>
     *
     * Protobuf type {@code OutboundDriverMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:OutboundDriverMessage)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = "";

        messageCase_ = 0;
        message_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_OutboundDriverMessage_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage(this);
        result.driverId_ = driverId_;
        if (messageCase_ == 2) {
          if (pickupPassengerBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = pickupPassengerBuilder_.build();
          }
        }
        result.messageCase_ = messageCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.getDefaultInstance()) return this;
        if (!other.getDriverId().isEmpty()) {
          driverId_ = other.driverId_;
          onChanged();
        }
        switch (other.getMessageCase()) {
          case PICKUP_PASSENGER: {
            mergePickupPassenger(other.getPickupPassenger());
            break;
          }
          case MESSAGE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int messageCase_ = 0;
      private java.lang.Object message_;
      public MessageCase
          getMessageCase() {
        return MessageCase.forNumber(
            messageCase_);
      }

      public Builder clearMessage() {
        messageCase_ = 0;
        message_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object driverId_ = "";
      /**
       * <code>string driver_id = 1;</code>
       * @return The driverId.
       */
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return The bytes for driverId.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        driverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        
        driverId_ = getDefaultInstance().getDriverId();
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The bytes for driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        driverId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassengerOrBuilder> pickupPassengerBuilder_;
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       * @return Whether the pickupPassenger field is set.
       */
      @java.lang.Override
      public boolean hasPickupPassenger() {
        return messageCase_ == 2;
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       * @return The pickupPassenger.
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger getPickupPassenger() {
        if (pickupPassengerBuilder_ == null) {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance();
        } else {
          if (messageCase_ == 2) {
            return pickupPassengerBuilder_.getMessage();
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       */
      public Builder setPickupPassenger(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger value) {
        if (pickupPassengerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          pickupPassengerBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       */
      public Builder setPickupPassenger(
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder builderForValue) {
        if (pickupPassengerBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          pickupPassengerBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       */
      public Builder mergePickupPassenger(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger value) {
        if (pickupPassengerBuilder_ == null) {
          if (messageCase_ == 2 &&
              message_ != org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance()) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.newBuilder((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 2) {
            pickupPassengerBuilder_.mergeFrom(value);
          }
          pickupPassengerBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       */
      public Builder clearPickupPassenger() {
        if (pickupPassengerBuilder_ == null) {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
          }
          pickupPassengerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       */
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder getPickupPassengerBuilder() {
        return getPickupPassengerFieldBuilder().getBuilder();
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassengerOrBuilder getPickupPassengerOrBuilder() {
        if ((messageCase_ == 2) && (pickupPassengerBuilder_ != null)) {
          return pickupPassengerBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 2) {
            return (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_;
          }
          return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance();
        }
      }
      /**
       * <code>.OutboundDriverMessage.PickupPassenger pickup_passenger = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassengerOrBuilder> 
          getPickupPassengerFieldBuilder() {
        if (pickupPassengerBuilder_ == null) {
          if (!(messageCase_ == 2)) {
            message_ = org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.getDefaultInstance();
          }
          pickupPassengerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger.Builder, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassengerOrBuilder>(
                  (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage.PickupPassenger) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 2;
        onChanged();;
        return pickupPassengerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:OutboundDriverMessage)
    }

    // @@protoc_insertion_point(class_scope:OutboundDriverMessage)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OutboundDriverMessage>
        PARSER = new com.google.protobuf.AbstractParser<OutboundDriverMessage>() {
      @java.lang.Override
      public OutboundDriverMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutboundDriverMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OutboundDriverMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OutboundDriverMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.OutboundDriverMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DriverJoinsRideOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DriverJoinsRide)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    java.lang.String getDriverId();
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes();

    /**
     * <code>string passenger_id = 2;</code>
     * @return The passengerId.
     */
    java.lang.String getPassengerId();
    /**
     * <code>string passenger_id = 2;</code>
     * @return The bytes for passengerId.
     */
    com.google.protobuf.ByteString
        getPassengerIdBytes();

    /**
     * <code>int32 driver_location = 3;</code>
     * @return The driverLocation.
     */
    int getDriverLocation();
  }
  /**
   * Protobuf type {@code DriverJoinsRide}
   */
  public static final class DriverJoinsRide extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DriverJoinsRide)
      DriverJoinsRideOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DriverJoinsRide.newBuilder() to construct.
    private DriverJoinsRide(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DriverJoinsRide() {
      driverId_ = "";
      passengerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DriverJoinsRide();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DriverJoinsRide(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              driverId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              passengerId_ = s;
              break;
            }
            case 24: {

              driverLocation_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverJoinsRide_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverJoinsRide_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide.Builder.class);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object driverId_;
    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    @java.lang.Override
    public java.lang.String getDriverId() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        driverId_ = s;
        return s;
      }
    }
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDriverIdBytes() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        driverId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PASSENGER_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object passengerId_;
    /**
     * <code>string passenger_id = 2;</code>
     * @return The passengerId.
     */
    @java.lang.Override
    public java.lang.String getPassengerId() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        passengerId_ = s;
        return s;
      }
    }
    /**
     * <code>string passenger_id = 2;</code>
     * @return The bytes for passengerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPassengerIdBytes() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        passengerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DRIVER_LOCATION_FIELD_NUMBER = 3;
    private int driverLocation_;
    /**
     * <code>int32 driver_location = 3;</code>
     * @return The driverLocation.
     */
    @java.lang.Override
    public int getDriverLocation() {
      return driverLocation_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDriverIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_);
      }
      if (!getPassengerIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, passengerId_);
      }
      if (driverLocation_ != 0) {
        output.writeInt32(3, driverLocation_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDriverIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, driverId_);
      }
      if (!getPassengerIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, passengerId_);
      }
      if (driverLocation_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, driverLocation_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide) obj;

      if (!getDriverId()
          .equals(other.getDriverId())) return false;
      if (!getPassengerId()
          .equals(other.getPassengerId())) return false;
      if (getDriverLocation()
          != other.getDriverLocation()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDriverId().hashCode();
      hash = (37 * hash) + PASSENGER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getPassengerId().hashCode();
      hash = (37 * hash) + DRIVER_LOCATION_FIELD_NUMBER;
      hash = (53 * hash) + getDriverLocation();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DriverJoinsRide}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DriverJoinsRide)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRideOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverJoinsRide_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverJoinsRide_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = "";

        passengerId_ = "";

        driverLocation_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverJoinsRide_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide(this);
        result.driverId_ = driverId_;
        result.passengerId_ = passengerId_;
        result.driverLocation_ = driverLocation_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide.getDefaultInstance()) return this;
        if (!other.getDriverId().isEmpty()) {
          driverId_ = other.driverId_;
          onChanged();
        }
        if (!other.getPassengerId().isEmpty()) {
          passengerId_ = other.passengerId_;
          onChanged();
        }
        if (other.getDriverLocation() != 0) {
          setDriverLocation(other.getDriverLocation());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object driverId_ = "";
      /**
       * <code>string driver_id = 1;</code>
       * @return The driverId.
       */
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return The bytes for driverId.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        driverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        
        driverId_ = getDefaultInstance().getDriverId();
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The bytes for driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        driverId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object passengerId_ = "";
      /**
       * <code>string passenger_id = 2;</code>
       * @return The passengerId.
       */
      public java.lang.String getPassengerId() {
        java.lang.Object ref = passengerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          passengerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @return The bytes for passengerId.
       */
      public com.google.protobuf.ByteString
          getPassengerIdBytes() {
        java.lang.Object ref = passengerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passengerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @param value The passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        passengerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerId() {
        
        passengerId_ = getDefaultInstance().getPassengerId();
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @param value The bytes for passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        passengerId_ = value;
        onChanged();
        return this;
      }

      private int driverLocation_ ;
      /**
       * <code>int32 driver_location = 3;</code>
       * @return The driverLocation.
       */
      @java.lang.Override
      public int getDriverLocation() {
        return driverLocation_;
      }
      /**
       * <code>int32 driver_location = 3;</code>
       * @param value The driverLocation to set.
       * @return This builder for chaining.
       */
      public Builder setDriverLocation(int value) {
        
        driverLocation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 driver_location = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverLocation() {
        
        driverLocation_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DriverJoinsRide)
    }

    // @@protoc_insertion_point(class_scope:DriverJoinsRide)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DriverJoinsRide>
        PARSER = new com.google.protobuf.AbstractParser<DriverJoinsRide>() {
      @java.lang.Override
      public DriverJoinsRide parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DriverJoinsRide(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DriverJoinsRide> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DriverJoinsRide> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverJoinsRide getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PassengerJoinsRideOrBuilder extends
      // @@protoc_insertion_point(interface_extends:PassengerJoinsRide)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string passenger_id = 1;</code>
     * @return The passengerId.
     */
    java.lang.String getPassengerId();
    /**
     * <code>string passenger_id = 1;</code>
     * @return The bytes for passengerId.
     */
    com.google.protobuf.ByteString
        getPassengerIdBytes();

    /**
     * <code>int32 start_geo_cell = 2;</code>
     * @return The startGeoCell.
     */
    int getStartGeoCell();

    /**
     * <code>int32 end_geo_cell = 3;</code>
     * @return The endGeoCell.
     */
    int getEndGeoCell();
  }
  /**
   * Protobuf type {@code PassengerJoinsRide}
   */
  public static final class PassengerJoinsRide extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:PassengerJoinsRide)
      PassengerJoinsRideOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PassengerJoinsRide.newBuilder() to construct.
    private PassengerJoinsRide(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PassengerJoinsRide() {
      passengerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PassengerJoinsRide();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PassengerJoinsRide(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              passengerId_ = s;
              break;
            }
            case 16: {

              startGeoCell_ = input.readInt32();
              break;
            }
            case 24: {

              endGeoCell_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PassengerJoinsRide_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PassengerJoinsRide_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide.Builder.class);
    }

    public static final int PASSENGER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object passengerId_;
    /**
     * <code>string passenger_id = 1;</code>
     * @return The passengerId.
     */
    @java.lang.Override
    public java.lang.String getPassengerId() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        passengerId_ = s;
        return s;
      }
    }
    /**
     * <code>string passenger_id = 1;</code>
     * @return The bytes for passengerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPassengerIdBytes() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        passengerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_GEO_CELL_FIELD_NUMBER = 2;
    private int startGeoCell_;
    /**
     * <code>int32 start_geo_cell = 2;</code>
     * @return The startGeoCell.
     */
    @java.lang.Override
    public int getStartGeoCell() {
      return startGeoCell_;
    }

    public static final int END_GEO_CELL_FIELD_NUMBER = 3;
    private int endGeoCell_;
    /**
     * <code>int32 end_geo_cell = 3;</code>
     * @return The endGeoCell.
     */
    @java.lang.Override
    public int getEndGeoCell() {
      return endGeoCell_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getPassengerIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, passengerId_);
      }
      if (startGeoCell_ != 0) {
        output.writeInt32(2, startGeoCell_);
      }
      if (endGeoCell_ != 0) {
        output.writeInt32(3, endGeoCell_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getPassengerIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, passengerId_);
      }
      if (startGeoCell_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, startGeoCell_);
      }
      if (endGeoCell_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, endGeoCell_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide) obj;

      if (!getPassengerId()
          .equals(other.getPassengerId())) return false;
      if (getStartGeoCell()
          != other.getStartGeoCell()) return false;
      if (getEndGeoCell()
          != other.getEndGeoCell()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PASSENGER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getPassengerId().hashCode();
      hash = (37 * hash) + START_GEO_CELL_FIELD_NUMBER;
      hash = (53 * hash) + getStartGeoCell();
      hash = (37 * hash) + END_GEO_CELL_FIELD_NUMBER;
      hash = (53 * hash) + getEndGeoCell();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code PassengerJoinsRide}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:PassengerJoinsRide)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRideOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PassengerJoinsRide_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PassengerJoinsRide_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        passengerId_ = "";

        startGeoCell_ = 0;

        endGeoCell_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PassengerJoinsRide_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide(this);
        result.passengerId_ = passengerId_;
        result.startGeoCell_ = startGeoCell_;
        result.endGeoCell_ = endGeoCell_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide.getDefaultInstance()) return this;
        if (!other.getPassengerId().isEmpty()) {
          passengerId_ = other.passengerId_;
          onChanged();
        }
        if (other.getStartGeoCell() != 0) {
          setStartGeoCell(other.getStartGeoCell());
        }
        if (other.getEndGeoCell() != 0) {
          setEndGeoCell(other.getEndGeoCell());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object passengerId_ = "";
      /**
       * <code>string passenger_id = 1;</code>
       * @return The passengerId.
       */
      public java.lang.String getPassengerId() {
        java.lang.Object ref = passengerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          passengerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @return The bytes for passengerId.
       */
      public com.google.protobuf.ByteString
          getPassengerIdBytes() {
        java.lang.Object ref = passengerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passengerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @param value The passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        passengerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerId() {
        
        passengerId_ = getDefaultInstance().getPassengerId();
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 1;</code>
       * @param value The bytes for passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        passengerId_ = value;
        onChanged();
        return this;
      }

      private int startGeoCell_ ;
      /**
       * <code>int32 start_geo_cell = 2;</code>
       * @return The startGeoCell.
       */
      @java.lang.Override
      public int getStartGeoCell() {
        return startGeoCell_;
      }
      /**
       * <code>int32 start_geo_cell = 2;</code>
       * @param value The startGeoCell to set.
       * @return This builder for chaining.
       */
      public Builder setStartGeoCell(int value) {
        
        startGeoCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 start_geo_cell = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartGeoCell() {
        
        startGeoCell_ = 0;
        onChanged();
        return this;
      }

      private int endGeoCell_ ;
      /**
       * <code>int32 end_geo_cell = 3;</code>
       * @return The endGeoCell.
       */
      @java.lang.Override
      public int getEndGeoCell() {
        return endGeoCell_;
      }
      /**
       * <code>int32 end_geo_cell = 3;</code>
       * @param value The endGeoCell to set.
       * @return This builder for chaining.
       */
      public Builder setEndGeoCell(int value) {
        
        endGeoCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 end_geo_cell = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearEndGeoCell() {
        
        endGeoCell_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:PassengerJoinsRide)
    }

    // @@protoc_insertion_point(class_scope:PassengerJoinsRide)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PassengerJoinsRide>
        PARSER = new com.google.protobuf.AbstractParser<PassengerJoinsRide>() {
      @java.lang.Override
      public PassengerJoinsRide parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PassengerJoinsRide(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PassengerJoinsRide> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PassengerJoinsRide> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PassengerJoinsRide getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RideStartedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RideStarted)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    java.lang.String getDriverId();
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes();

    /**
     * <code>int32 driver_geo_cell = 2;</code>
     * @return The driverGeoCell.
     */
    int getDriverGeoCell();
  }
  /**
   * Protobuf type {@code RideStarted}
   */
  public static final class RideStarted extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RideStarted)
      RideStartedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RideStarted.newBuilder() to construct.
    private RideStarted(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RideStarted() {
      driverId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RideStarted();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RideStarted(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              driverId_ = s;
              break;
            }
            case 16: {

              driverGeoCell_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideStarted_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideStarted_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted.Builder.class);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object driverId_;
    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    @java.lang.Override
    public java.lang.String getDriverId() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        driverId_ = s;
        return s;
      }
    }
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDriverIdBytes() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        driverId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DRIVER_GEO_CELL_FIELD_NUMBER = 2;
    private int driverGeoCell_;
    /**
     * <code>int32 driver_geo_cell = 2;</code>
     * @return The driverGeoCell.
     */
    @java.lang.Override
    public int getDriverGeoCell() {
      return driverGeoCell_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDriverIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_);
      }
      if (driverGeoCell_ != 0) {
        output.writeInt32(2, driverGeoCell_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDriverIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, driverId_);
      }
      if (driverGeoCell_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, driverGeoCell_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted) obj;

      if (!getDriverId()
          .equals(other.getDriverId())) return false;
      if (getDriverGeoCell()
          != other.getDriverGeoCell()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDriverId().hashCode();
      hash = (37 * hash) + DRIVER_GEO_CELL_FIELD_NUMBER;
      hash = (53 * hash) + getDriverGeoCell();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RideStarted}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RideStarted)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStartedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideStarted_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideStarted_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = "";

        driverGeoCell_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideStarted_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted(this);
        result.driverId_ = driverId_;
        result.driverGeoCell_ = driverGeoCell_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted.getDefaultInstance()) return this;
        if (!other.getDriverId().isEmpty()) {
          driverId_ = other.driverId_;
          onChanged();
        }
        if (other.getDriverGeoCell() != 0) {
          setDriverGeoCell(other.getDriverGeoCell());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object driverId_ = "";
      /**
       * <code>string driver_id = 1;</code>
       * @return The driverId.
       */
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return The bytes for driverId.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        driverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        
        driverId_ = getDefaultInstance().getDriverId();
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The bytes for driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        driverId_ = value;
        onChanged();
        return this;
      }

      private int driverGeoCell_ ;
      /**
       * <code>int32 driver_geo_cell = 2;</code>
       * @return The driverGeoCell.
       */
      @java.lang.Override
      public int getDriverGeoCell() {
        return driverGeoCell_;
      }
      /**
       * <code>int32 driver_geo_cell = 2;</code>
       * @param value The driverGeoCell to set.
       * @return This builder for chaining.
       */
      public Builder setDriverGeoCell(int value) {
        
        driverGeoCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 driver_geo_cell = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverGeoCell() {
        
        driverGeoCell_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RideStarted)
    }

    // @@protoc_insertion_point(class_scope:RideStarted)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RideStarted>
        PARSER = new com.google.protobuf.AbstractParser<RideStarted>() {
      @java.lang.Override
      public RideStarted parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RideStarted(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RideStarted> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RideStarted> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideStarted getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RideFailedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RideFailed)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string ride_id = 1;</code>
     * @return The rideId.
     */
    java.lang.String getRideId();
    /**
     * <code>string ride_id = 1;</code>
     * @return The bytes for rideId.
     */
    com.google.protobuf.ByteString
        getRideIdBytes();
  }
  /**
   * Protobuf type {@code RideFailed}
   */
  public static final class RideFailed extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RideFailed)
      RideFailedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RideFailed.newBuilder() to construct.
    private RideFailed(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RideFailed() {
      rideId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RideFailed();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RideFailed(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              rideId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideFailed_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideFailed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed.Builder.class);
    }

    public static final int RIDE_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object rideId_;
    /**
     * <code>string ride_id = 1;</code>
     * @return The rideId.
     */
    @java.lang.Override
    public java.lang.String getRideId() {
      java.lang.Object ref = rideId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        rideId_ = s;
        return s;
      }
    }
    /**
     * <code>string ride_id = 1;</code>
     * @return The bytes for rideId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRideIdBytes() {
      java.lang.Object ref = rideId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rideId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getRideIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, rideId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getRideIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, rideId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed) obj;

      if (!getRideId()
          .equals(other.getRideId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RIDE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getRideId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RideFailed}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RideFailed)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideFailed_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideFailed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        rideId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideFailed_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed(this);
        result.rideId_ = rideId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed.getDefaultInstance()) return this;
        if (!other.getRideId().isEmpty()) {
          rideId_ = other.rideId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object rideId_ = "";
      /**
       * <code>string ride_id = 1;</code>
       * @return The rideId.
       */
      public java.lang.String getRideId() {
        java.lang.Object ref = rideId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          rideId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string ride_id = 1;</code>
       * @return The bytes for rideId.
       */
      public com.google.protobuf.ByteString
          getRideIdBytes() {
        java.lang.Object ref = rideId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rideId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string ride_id = 1;</code>
       * @param value The rideId to set.
       * @return This builder for chaining.
       */
      public Builder setRideId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        rideId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string ride_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRideId() {
        
        rideId_ = getDefaultInstance().getRideId();
        onChanged();
        return this;
      }
      /**
       * <code>string ride_id = 1;</code>
       * @param value The bytes for rideId to set.
       * @return This builder for chaining.
       */
      public Builder setRideIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        rideId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RideFailed)
    }

    // @@protoc_insertion_point(class_scope:RideFailed)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RideFailed>
        PARSER = new com.google.protobuf.AbstractParser<RideFailed>() {
      @java.lang.Override
      public RideFailed parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RideFailed(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RideFailed> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RideFailed> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideFailed getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RideEndedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RideEnded)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code RideEnded}
   */
  public static final class RideEnded extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RideEnded)
      RideEndedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RideEnded.newBuilder() to construct.
    private RideEnded(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RideEnded() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RideEnded();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RideEnded(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideEnded_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideEnded_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RideEnded}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RideEnded)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEndedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideEnded_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideEnded_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_RideEnded_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RideEnded)
    }

    // @@protoc_insertion_point(class_scope:RideEnded)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RideEnded>
        PARSER = new com.google.protobuf.AbstractParser<RideEnded>() {
      @java.lang.Override
      public RideEnded parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RideEnded(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RideEnded> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RideEnded> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.RideEnded getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JoinCellOrBuilder extends
      // @@protoc_insertion_point(interface_extends:JoinCell)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code JoinCell}
   */
  public static final class JoinCell extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:JoinCell)
      JoinCellOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use JoinCell.newBuilder() to construct.
    private JoinCell(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private JoinCell() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new JoinCell();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private JoinCell(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_JoinCell_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_JoinCell_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code JoinCell}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:JoinCell)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCellOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_JoinCell_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_JoinCell_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_JoinCell_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:JoinCell)
    }

    // @@protoc_insertion_point(class_scope:JoinCell)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<JoinCell>
        PARSER = new com.google.protobuf.AbstractParser<JoinCell>() {
      @java.lang.Override
      public JoinCell parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JoinCell(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<JoinCell> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<JoinCell> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.JoinCell getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LeaveCellOrBuilder extends
      // @@protoc_insertion_point(interface_extends:LeaveCell)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code LeaveCell}
   */
  public static final class LeaveCell extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:LeaveCell)
      LeaveCellOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LeaveCell.newBuilder() to construct.
    private LeaveCell(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LeaveCell() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LeaveCell();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LeaveCell(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_LeaveCell_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_LeaveCell_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code LeaveCell}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:LeaveCell)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCellOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_LeaveCell_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_LeaveCell_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_LeaveCell_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:LeaveCell)
    }

    // @@protoc_insertion_point(class_scope:LeaveCell)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LeaveCell>
        PARSER = new com.google.protobuf.AbstractParser<LeaveCell>() {
      @java.lang.Override
      public LeaveCell parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LeaveCell(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LeaveCell> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LeaveCell> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.LeaveCell getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetDriverOrBuilder extends
      // @@protoc_insertion_point(interface_extends:GetDriver)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code GetDriver}
   */
  public static final class GetDriver extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:GetDriver)
      GetDriverOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetDriver.newBuilder() to construct.
    private GetDriver(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetDriver() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetDriver();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GetDriver(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GetDriver_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GetDriver_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code GetDriver}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:GetDriver)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriverOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GetDriver_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GetDriver_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GetDriver_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:GetDriver)
    }

    // @@protoc_insertion_point(class_scope:GetDriver)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetDriver>
        PARSER = new com.google.protobuf.AbstractParser<GetDriver>() {
      @java.lang.Override
      public GetDriver parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GetDriver(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GetDriver> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetDriver> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GetDriver getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DriverInCellOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DriverInCell)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    java.lang.String getDriverId();
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes();
  }
  /**
   * Protobuf type {@code DriverInCell}
   */
  public static final class DriverInCell extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DriverInCell)
      DriverInCellOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DriverInCell.newBuilder() to construct.
    private DriverInCell(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DriverInCell() {
      driverId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DriverInCell();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DriverInCell(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              driverId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverInCell_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverInCell_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell.Builder.class);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object driverId_;
    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    @java.lang.Override
    public java.lang.String getDriverId() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        driverId_ = s;
        return s;
      }
    }
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDriverIdBytes() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        driverId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDriverIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDriverIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, driverId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell) obj;

      if (!getDriverId()
          .equals(other.getDriverId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDriverId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DriverInCell}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DriverInCell)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCellOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverInCell_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverInCell_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverInCell_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell(this);
        result.driverId_ = driverId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell.getDefaultInstance()) return this;
        if (!other.getDriverId().isEmpty()) {
          driverId_ = other.driverId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object driverId_ = "";
      /**
       * <code>string driver_id = 1;</code>
       * @return The driverId.
       */
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return The bytes for driverId.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        driverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        
        driverId_ = getDefaultInstance().getDriverId();
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The bytes for driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        driverId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DriverInCell)
    }

    // @@protoc_insertion_point(class_scope:DriverInCell)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DriverInCell>
        PARSER = new com.google.protobuf.AbstractParser<DriverInCell>() {
      @java.lang.Override
      public DriverInCell parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DriverInCell(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DriverInCell> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DriverInCell> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverInCell getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PickupPassengerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:PickupPassenger)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    java.lang.String getDriverId();
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes();

    /**
     * <code>string passenger_id = 2;</code>
     * @return The passengerId.
     */
    java.lang.String getPassengerId();
    /**
     * <code>string passenger_id = 2;</code>
     * @return The bytes for passengerId.
     */
    com.google.protobuf.ByteString
        getPassengerIdBytes();

    /**
     * <code>int32 passenger_start_cell = 3;</code>
     * @return The passengerStartCell.
     */
    int getPassengerStartCell();

    /**
     * <code>int32 passenger_end_cell = 4;</code>
     * @return The passengerEndCell.
     */
    int getPassengerEndCell();
  }
  /**
   * Protobuf type {@code PickupPassenger}
   */
  public static final class PickupPassenger extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:PickupPassenger)
      PickupPassengerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PickupPassenger.newBuilder() to construct.
    private PickupPassenger(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PickupPassenger() {
      driverId_ = "";
      passengerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PickupPassenger();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PickupPassenger(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              driverId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              passengerId_ = s;
              break;
            }
            case 24: {

              passengerStartCell_ = input.readInt32();
              break;
            }
            case 32: {

              passengerEndCell_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PickupPassenger_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PickupPassenger_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger.Builder.class);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object driverId_;
    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    @java.lang.Override
    public java.lang.String getDriverId() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        driverId_ = s;
        return s;
      }
    }
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDriverIdBytes() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        driverId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PASSENGER_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object passengerId_;
    /**
     * <code>string passenger_id = 2;</code>
     * @return The passengerId.
     */
    @java.lang.Override
    public java.lang.String getPassengerId() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        passengerId_ = s;
        return s;
      }
    }
    /**
     * <code>string passenger_id = 2;</code>
     * @return The bytes for passengerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPassengerIdBytes() {
      java.lang.Object ref = passengerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        passengerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PASSENGER_START_CELL_FIELD_NUMBER = 3;
    private int passengerStartCell_;
    /**
     * <code>int32 passenger_start_cell = 3;</code>
     * @return The passengerStartCell.
     */
    @java.lang.Override
    public int getPassengerStartCell() {
      return passengerStartCell_;
    }

    public static final int PASSENGER_END_CELL_FIELD_NUMBER = 4;
    private int passengerEndCell_;
    /**
     * <code>int32 passenger_end_cell = 4;</code>
     * @return The passengerEndCell.
     */
    @java.lang.Override
    public int getPassengerEndCell() {
      return passengerEndCell_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDriverIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_);
      }
      if (!getPassengerIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, passengerId_);
      }
      if (passengerStartCell_ != 0) {
        output.writeInt32(3, passengerStartCell_);
      }
      if (passengerEndCell_ != 0) {
        output.writeInt32(4, passengerEndCell_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDriverIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, driverId_);
      }
      if (!getPassengerIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, passengerId_);
      }
      if (passengerStartCell_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, passengerStartCell_);
      }
      if (passengerEndCell_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, passengerEndCell_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger) obj;

      if (!getDriverId()
          .equals(other.getDriverId())) return false;
      if (!getPassengerId()
          .equals(other.getPassengerId())) return false;
      if (getPassengerStartCell()
          != other.getPassengerStartCell()) return false;
      if (getPassengerEndCell()
          != other.getPassengerEndCell()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDriverId().hashCode();
      hash = (37 * hash) + PASSENGER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getPassengerId().hashCode();
      hash = (37 * hash) + PASSENGER_START_CELL_FIELD_NUMBER;
      hash = (53 * hash) + getPassengerStartCell();
      hash = (37 * hash) + PASSENGER_END_CELL_FIELD_NUMBER;
      hash = (53 * hash) + getPassengerEndCell();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code PickupPassenger}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:PickupPassenger)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassengerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PickupPassenger_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PickupPassenger_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = "";

        passengerId_ = "";

        passengerStartCell_ = 0;

        passengerEndCell_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_PickupPassenger_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger(this);
        result.driverId_ = driverId_;
        result.passengerId_ = passengerId_;
        result.passengerStartCell_ = passengerStartCell_;
        result.passengerEndCell_ = passengerEndCell_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger.getDefaultInstance()) return this;
        if (!other.getDriverId().isEmpty()) {
          driverId_ = other.driverId_;
          onChanged();
        }
        if (!other.getPassengerId().isEmpty()) {
          passengerId_ = other.passengerId_;
          onChanged();
        }
        if (other.getPassengerStartCell() != 0) {
          setPassengerStartCell(other.getPassengerStartCell());
        }
        if (other.getPassengerEndCell() != 0) {
          setPassengerEndCell(other.getPassengerEndCell());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object driverId_ = "";
      /**
       * <code>string driver_id = 1;</code>
       * @return The driverId.
       */
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return The bytes for driverId.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        driverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        
        driverId_ = getDefaultInstance().getDriverId();
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The bytes for driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        driverId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object passengerId_ = "";
      /**
       * <code>string passenger_id = 2;</code>
       * @return The passengerId.
       */
      public java.lang.String getPassengerId() {
        java.lang.Object ref = passengerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          passengerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @return The bytes for passengerId.
       */
      public com.google.protobuf.ByteString
          getPassengerIdBytes() {
        java.lang.Object ref = passengerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          passengerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @param value The passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        passengerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerId() {
        
        passengerId_ = getDefaultInstance().getPassengerId();
        onChanged();
        return this;
      }
      /**
       * <code>string passenger_id = 2;</code>
       * @param value The bytes for passengerId to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        passengerId_ = value;
        onChanged();
        return this;
      }

      private int passengerStartCell_ ;
      /**
       * <code>int32 passenger_start_cell = 3;</code>
       * @return The passengerStartCell.
       */
      @java.lang.Override
      public int getPassengerStartCell() {
        return passengerStartCell_;
      }
      /**
       * <code>int32 passenger_start_cell = 3;</code>
       * @param value The passengerStartCell to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerStartCell(int value) {
        
        passengerStartCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 passenger_start_cell = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerStartCell() {
        
        passengerStartCell_ = 0;
        onChanged();
        return this;
      }

      private int passengerEndCell_ ;
      /**
       * <code>int32 passenger_end_cell = 4;</code>
       * @return The passengerEndCell.
       */
      @java.lang.Override
      public int getPassengerEndCell() {
        return passengerEndCell_;
      }
      /**
       * <code>int32 passenger_end_cell = 4;</code>
       * @param value The passengerEndCell to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerEndCell(int value) {
        
        passengerEndCell_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 passenger_end_cell = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerEndCell() {
        
        passengerEndCell_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:PickupPassenger)
    }

    // @@protoc_insertion_point(class_scope:PickupPassenger)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PickupPassenger>
        PARSER = new com.google.protobuf.AbstractParser<PickupPassenger>() {
      @java.lang.Override
      public PickupPassenger parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PickupPassenger(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PickupPassenger> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PickupPassenger> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.PickupPassenger getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DriverRejectsPickupOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DriverRejectsPickup)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    java.lang.String getDriverId();
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes();

    /**
     * <code>string ride_id = 2;</code>
     * @return The rideId.
     */
    java.lang.String getRideId();
    /**
     * <code>string ride_id = 2;</code>
     * @return The bytes for rideId.
     */
    com.google.protobuf.ByteString
        getRideIdBytes();
  }
  /**
   * Protobuf type {@code DriverRejectsPickup}
   */
  public static final class DriverRejectsPickup extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DriverRejectsPickup)
      DriverRejectsPickupOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DriverRejectsPickup.newBuilder() to construct.
    private DriverRejectsPickup(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DriverRejectsPickup() {
      driverId_ = "";
      rideId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DriverRejectsPickup();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DriverRejectsPickup(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              driverId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              rideId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverRejectsPickup_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverRejectsPickup_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup.Builder.class);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object driverId_;
    /**
     * <code>string driver_id = 1;</code>
     * @return The driverId.
     */
    @java.lang.Override
    public java.lang.String getDriverId() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        driverId_ = s;
        return s;
      }
    }
    /**
     * <code>string driver_id = 1;</code>
     * @return The bytes for driverId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDriverIdBytes() {
      java.lang.Object ref = driverId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        driverId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RIDE_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object rideId_;
    /**
     * <code>string ride_id = 2;</code>
     * @return The rideId.
     */
    @java.lang.Override
    public java.lang.String getRideId() {
      java.lang.Object ref = rideId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        rideId_ = s;
        return s;
      }
    }
    /**
     * <code>string ride_id = 2;</code>
     * @return The bytes for rideId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRideIdBytes() {
      java.lang.Object ref = rideId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rideId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDriverIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_);
      }
      if (!getRideIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, rideId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDriverIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, driverId_);
      }
      if (!getRideIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, rideId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup) obj;

      if (!getDriverId()
          .equals(other.getDriverId())) return false;
      if (!getRideId()
          .equals(other.getRideId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDriverId().hashCode();
      hash = (37 * hash) + RIDE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getRideId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DriverRejectsPickup}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DriverRejectsPickup)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickupOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverRejectsPickup_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverRejectsPickup_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = "";

        rideId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_DriverRejectsPickup_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup(this);
        result.driverId_ = driverId_;
        result.rideId_ = rideId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup.getDefaultInstance()) return this;
        if (!other.getDriverId().isEmpty()) {
          driverId_ = other.driverId_;
          onChanged();
        }
        if (!other.getRideId().isEmpty()) {
          rideId_ = other.rideId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object driverId_ = "";
      /**
       * <code>string driver_id = 1;</code>
       * @return The driverId.
       */
      public java.lang.String getDriverId() {
        java.lang.Object ref = driverId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          driverId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return The bytes for driverId.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes() {
        java.lang.Object ref = driverId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          driverId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        driverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        
        driverId_ = getDefaultInstance().getDriverId();
        onChanged();
        return this;
      }
      /**
       * <code>string driver_id = 1;</code>
       * @param value The bytes for driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        driverId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object rideId_ = "";
      /**
       * <code>string ride_id = 2;</code>
       * @return The rideId.
       */
      public java.lang.String getRideId() {
        java.lang.Object ref = rideId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          rideId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string ride_id = 2;</code>
       * @return The bytes for rideId.
       */
      public com.google.protobuf.ByteString
          getRideIdBytes() {
        java.lang.Object ref = rideId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rideId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string ride_id = 2;</code>
       * @param value The rideId to set.
       * @return This builder for chaining.
       */
      public Builder setRideId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        rideId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string ride_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRideId() {
        
        rideId_ = getDefaultInstance().getRideId();
        onChanged();
        return this;
      }
      /**
       * <code>string ride_id = 2;</code>
       * @param value The bytes for rideId to set.
       * @return This builder for chaining.
       */
      public Builder setRideIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        rideId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DriverRejectsPickup)
    }

    // @@protoc_insertion_point(class_scope:DriverRejectsPickup)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DriverRejectsPickup>
        PARSER = new com.google.protobuf.AbstractParser<DriverRejectsPickup>() {
      @java.lang.Override
      public DriverRejectsPickup parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DriverRejectsPickup(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DriverRejectsPickup> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DriverRejectsPickup> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.DriverRejectsPickup getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GeoCellStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:GeoCellState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string driver_id = 1;</code>
     * @return A list containing the driverId.
     */
    java.util.List<java.lang.String>
        getDriverIdList();
    /**
     * <code>repeated string driver_id = 1;</code>
     * @return The count of driverId.
     */
    int getDriverIdCount();
    /**
     * <code>repeated string driver_id = 1;</code>
     * @param index The index of the element to return.
     * @return The driverId at the given index.
     */
    java.lang.String getDriverId(int index);
    /**
     * <code>repeated string driver_id = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the driverId at the given index.
     */
    com.google.protobuf.ByteString
        getDriverIdBytes(int index);
  }
  /**
   * Protobuf type {@code GeoCellState}
   */
  public static final class GeoCellState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:GeoCellState)
      GeoCellStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GeoCellState.newBuilder() to construct.
    private GeoCellState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GeoCellState() {
      driverId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GeoCellState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GeoCellState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                driverId_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              driverId_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          driverId_ = driverId_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GeoCellState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GeoCellState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState.Builder.class);
    }

    public static final int DRIVER_ID_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList driverId_;
    /**
     * <code>repeated string driver_id = 1;</code>
     * @return A list containing the driverId.
     */
    public com.google.protobuf.ProtocolStringList
        getDriverIdList() {
      return driverId_;
    }
    /**
     * <code>repeated string driver_id = 1;</code>
     * @return The count of driverId.
     */
    public int getDriverIdCount() {
      return driverId_.size();
    }
    /**
     * <code>repeated string driver_id = 1;</code>
     * @param index The index of the element to return.
     * @return The driverId at the given index.
     */
    public java.lang.String getDriverId(int index) {
      return driverId_.get(index);
    }
    /**
     * <code>repeated string driver_id = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the driverId at the given index.
     */
    public com.google.protobuf.ByteString
        getDriverIdBytes(int index) {
      return driverId_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < driverId_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, driverId_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < driverId_.size(); i++) {
          dataSize += computeStringSizeNoTag(driverId_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDriverIdList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState)) {
        return super.equals(obj);
      }
      org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState other = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState) obj;

      if (!getDriverIdList()
          .equals(other.getDriverIdList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDriverIdCount() > 0) {
        hash = (37 * hash) + DRIVER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getDriverIdList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code GeoCellState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:GeoCellState)
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GeoCellState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GeoCellState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState.class, org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState.Builder.class);
      }

      // Construct using org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        driverId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.internal_static_GeoCellState_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState getDefaultInstanceForType() {
        return org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState build() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState buildPartial() {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState result = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          driverId_ = driverId_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.driverId_ = driverId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState) {
          return mergeFrom((org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState other) {
        if (other == org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState.getDefaultInstance()) return this;
        if (!other.driverId_.isEmpty()) {
          if (driverId_.isEmpty()) {
            driverId_ = other.driverId_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDriverIdIsMutable();
            driverId_.addAll(other.driverId_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList driverId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDriverIdIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          driverId_ = new com.google.protobuf.LazyStringArrayList(driverId_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @return A list containing the driverId.
       */
      public com.google.protobuf.ProtocolStringList
          getDriverIdList() {
        return driverId_.getUnmodifiableView();
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @return The count of driverId.
       */
      public int getDriverIdCount() {
        return driverId_.size();
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @param index The index of the element to return.
       * @return The driverId at the given index.
       */
      public java.lang.String getDriverId(int index) {
        return driverId_.get(index);
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the driverId at the given index.
       */
      public com.google.protobuf.ByteString
          getDriverIdBytes(int index) {
        return driverId_.getByteString(index);
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @param index The index to set the value at.
       * @param value The driverId to set.
       * @return This builder for chaining.
       */
      public Builder setDriverId(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDriverIdIsMutable();
        driverId_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @param value The driverId to add.
       * @return This builder for chaining.
       */
      public Builder addDriverId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDriverIdIsMutable();
        driverId_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @param values The driverId to add.
       * @return This builder for chaining.
       */
      public Builder addAllDriverId(
          java.lang.Iterable<java.lang.String> values) {
        ensureDriverIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, driverId_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDriverId() {
        driverId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string driver_id = 1;</code>
       * @param value The bytes of the driverId to add.
       * @return This builder for chaining.
       */
      public Builder addDriverIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureDriverIdIsMutable();
        driverId_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:GeoCellState)
    }

    // @@protoc_insertion_point(class_scope:GeoCellState)
    private static final org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState();
    }

    public static org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GeoCellState>
        PARSER = new com.google.protobuf.AbstractParser<GeoCellState>() {
      @java.lang.Override
      public GeoCellState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GeoCellState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GeoCellState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GeoCellState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.statefun.examples.ridesharing.protocol.RideSharingStates.GeoCellState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_InboundPassengerMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_InboundPassengerMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_InboundPassengerMessage_RequestRide_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_InboundPassengerMessage_RequestRide_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_OutboundPassengerMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_OutboundPassengerMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_OutboundPassengerMessage_DriverHasBeenFound_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_OutboundPassengerMessage_DriverHasBeenFound_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_OutboundPassengerMessage_RideFailed_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_OutboundPassengerMessage_RideFailed_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_OutboundPassengerMessage_RideStarted_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_OutboundPassengerMessage_RideStarted_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_OutboundPassengerMessage_RideEnded_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_OutboundPassengerMessage_RideEnded_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_InboundDriverMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_InboundDriverMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_InboundDriverMessage_RideStarted_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_InboundDriverMessage_RideStarted_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_InboundDriverMessage_RideEnded_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_InboundDriverMessage_RideEnded_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_InboundDriverMessage_LocationUpdate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_InboundDriverMessage_LocationUpdate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_OutboundDriverMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_OutboundDriverMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_OutboundDriverMessage_PickupPassenger_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_OutboundDriverMessage_PickupPassenger_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DriverJoinsRide_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DriverJoinsRide_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_PassengerJoinsRide_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_PassengerJoinsRide_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RideStarted_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RideStarted_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RideFailed_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RideFailed_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RideEnded_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RideEnded_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_JoinCell_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_JoinCell_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_LeaveCell_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_LeaveCell_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_GetDriver_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_GetDriver_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DriverInCell_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DriverInCell_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_PickupPassenger_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_PickupPassenger_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DriverRejectsPickup_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DriverRejectsPickup_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_GeoCellState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_GeoCellState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021ridesharing.proto\"\265\001\n\027InboundPassenger" +
      "Message\022\024\n\014passenger_id\030\001 \001(\t\022<\n\014request" +
      "_ride\030\002 \001(\0132$.InboundPassengerMessage.Re" +
      "questRideH\000\032;\n\013RequestRide\022\026\n\016start_geo_" +
      "cell\030\002 \001(\005\022\024\n\014end_geo_cell\030\003 \001(\005B\t\n\007mess" +
      "age\"\310\003\n\030OutboundPassengerMessage\022\024\n\014pass" +
      "enger_id\030\001 \001(\t\022D\n\014driver_found\030\002 \001(\0132,.O" +
      "utboundPassengerMessage.DriverHasBeenFou" +
      "ndH\000\022;\n\013ride_failed\030\003 \001(\0132$.OutboundPass" +
      "engerMessage.RideFailedH\000\022=\n\014ride_starte" +
      "d\030\004 \001(\0132%.OutboundPassengerMessage.RideS" +
      "tartedH\000\0229\n\nride_ended\030\005 \001(\0132#.OutboundP" +
      "assengerMessage.RideEndedH\000\032@\n\022DriverHas" +
      "BeenFound\022\021\n\tdriver_id\030\002 \001(\t\022\027\n\017driver_g" +
      "eo_cell\030\003 \001(\005\032\035\n\nRideFailed\022\017\n\007ride_id\030\002" +
      " \001(\t\032 \n\013RideStarted\022\021\n\tdriver_id\030\002 \001(\t\032\013" +
      "\n\tRideEndedB\t\n\007message\"\300\002\n\024InboundDriver" +
      "Message\022\021\n\tdriver_id\030\001 \001(\t\0229\n\014ride_start" +
      "ed\030\002 \001(\0132!.InboundDriverMessage.RideStar" +
      "tedH\000\0225\n\nride_ended\030\003 \001(\0132\037.InboundDrive" +
      "rMessage.RideEndedH\000\022?\n\017location_update\030" +
      "\004 \001(\0132$.InboundDriverMessage.LocationUpd" +
      "ateH\000\032\r\n\013RideStarted\032\034\n\tRideEnded\022\017\n\007rid" +
      "e_id\030\002 \001(\t\032*\n\016LocationUpdate\022\030\n\020current_" +
      "geo_cell\030\002 \001(\005B\t\n\007message\"\323\001\n\025OutboundDr" +
      "iverMessage\022\021\n\tdriver_id\030\001 \001(\t\022B\n\020pickup" +
      "_passenger\030\002 \001(\0132&.OutboundDriverMessage" +
      ".PickupPassengerH\000\032X\n\017PickupPassenger\022\017\n" +
      "\007ride_id\030\002 \001(\t\022\032\n\022start_geo_location\030\003 \001" +
      "(\005\022\030\n\020end_geo_location\030\004 \001(\005B\t\n\007message\"" +
      "S\n\017DriverJoinsRide\022\021\n\tdriver_id\030\001 \001(\t\022\024\n" +
      "\014passenger_id\030\002 \001(\t\022\027\n\017driver_location\030\003" +
      " \001(\005\"X\n\022PassengerJoinsRide\022\024\n\014passenger_" +
      "id\030\001 \001(\t\022\026\n\016start_geo_cell\030\002 \001(\005\022\024\n\014end_" +
      "geo_cell\030\003 \001(\005\"9\n\013RideStarted\022\021\n\tdriver_" +
      "id\030\001 \001(\t\022\027\n\017driver_geo_cell\030\002 \001(\005\"\035\n\nRid" +
      "eFailed\022\017\n\007ride_id\030\001 \001(\t\"\013\n\tRideEnded\"\n\n" +
      "\010JoinCell\"\013\n\tLeaveCell\"\013\n\tGetDriver\"!\n\014D" +
      "riverInCell\022\021\n\tdriver_id\030\001 \001(\t\"t\n\017Pickup" +
      "Passenger\022\021\n\tdriver_id\030\001 \001(\t\022\024\n\014passenge" +
      "r_id\030\002 \001(\t\022\034\n\024passenger_start_cell\030\003 \001(\005" +
      "\022\032\n\022passenger_end_cell\030\004 \001(\005\"9\n\023DriverRe" +
      "jectsPickup\022\021\n\tdriver_id\030\001 \001(\t\022\017\n\007ride_i" +
      "d\030\002 \001(\t\"!\n\014GeoCellState\022\021\n\tdriver_id\030\001 \003" +
      "(\tBb\n7org.apache.flink.statefun.examples" +
      ".ridesharing.protocolB\021RideSharingStates" +
      "Z\024ridesharing/protocolb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_InboundPassengerMessage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_InboundPassengerMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_InboundPassengerMessage_descriptor,
        new java.lang.String[] { "PassengerId", "RequestRide", "Message", });
    internal_static_InboundPassengerMessage_RequestRide_descriptor =
      internal_static_InboundPassengerMessage_descriptor.getNestedTypes().get(0);
    internal_static_InboundPassengerMessage_RequestRide_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_InboundPassengerMessage_RequestRide_descriptor,
        new java.lang.String[] { "StartGeoCell", "EndGeoCell", });
    internal_static_OutboundPassengerMessage_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_OutboundPassengerMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_OutboundPassengerMessage_descriptor,
        new java.lang.String[] { "PassengerId", "DriverFound", "RideFailed", "RideStarted", "RideEnded", "Message", });
    internal_static_OutboundPassengerMessage_DriverHasBeenFound_descriptor =
      internal_static_OutboundPassengerMessage_descriptor.getNestedTypes().get(0);
    internal_static_OutboundPassengerMessage_DriverHasBeenFound_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_OutboundPassengerMessage_DriverHasBeenFound_descriptor,
        new java.lang.String[] { "DriverId", "DriverGeoCell", });
    internal_static_OutboundPassengerMessage_RideFailed_descriptor =
      internal_static_OutboundPassengerMessage_descriptor.getNestedTypes().get(1);
    internal_static_OutboundPassengerMessage_RideFailed_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_OutboundPassengerMessage_RideFailed_descriptor,
        new java.lang.String[] { "RideId", });
    internal_static_OutboundPassengerMessage_RideStarted_descriptor =
      internal_static_OutboundPassengerMessage_descriptor.getNestedTypes().get(2);
    internal_static_OutboundPassengerMessage_RideStarted_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_OutboundPassengerMessage_RideStarted_descriptor,
        new java.lang.String[] { "DriverId", });
    internal_static_OutboundPassengerMessage_RideEnded_descriptor =
      internal_static_OutboundPassengerMessage_descriptor.getNestedTypes().get(3);
    internal_static_OutboundPassengerMessage_RideEnded_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_OutboundPassengerMessage_RideEnded_descriptor,
        new java.lang.String[] { });
    internal_static_InboundDriverMessage_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_InboundDriverMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_InboundDriverMessage_descriptor,
        new java.lang.String[] { "DriverId", "RideStarted", "RideEnded", "LocationUpdate", "Message", });
    internal_static_InboundDriverMessage_RideStarted_descriptor =
      internal_static_InboundDriverMessage_descriptor.getNestedTypes().get(0);
    internal_static_InboundDriverMessage_RideStarted_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_InboundDriverMessage_RideStarted_descriptor,
        new java.lang.String[] { });
    internal_static_InboundDriverMessage_RideEnded_descriptor =
      internal_static_InboundDriverMessage_descriptor.getNestedTypes().get(1);
    internal_static_InboundDriverMessage_RideEnded_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_InboundDriverMessage_RideEnded_descriptor,
        new java.lang.String[] { "RideId", });
    internal_static_InboundDriverMessage_LocationUpdate_descriptor =
      internal_static_InboundDriverMessage_descriptor.getNestedTypes().get(2);
    internal_static_InboundDriverMessage_LocationUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_InboundDriverMessage_LocationUpdate_descriptor,
        new java.lang.String[] { "CurrentGeoCell", });
    internal_static_OutboundDriverMessage_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_OutboundDriverMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_OutboundDriverMessage_descriptor,
        new java.lang.String[] { "DriverId", "PickupPassenger", "Message", });
    internal_static_OutboundDriverMessage_PickupPassenger_descriptor =
      internal_static_OutboundDriverMessage_descriptor.getNestedTypes().get(0);
    internal_static_OutboundDriverMessage_PickupPassenger_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_OutboundDriverMessage_PickupPassenger_descriptor,
        new java.lang.String[] { "RideId", "StartGeoLocation", "EndGeoLocation", });
    internal_static_DriverJoinsRide_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_DriverJoinsRide_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DriverJoinsRide_descriptor,
        new java.lang.String[] { "DriverId", "PassengerId", "DriverLocation", });
    internal_static_PassengerJoinsRide_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_PassengerJoinsRide_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_PassengerJoinsRide_descriptor,
        new java.lang.String[] { "PassengerId", "StartGeoCell", "EndGeoCell", });
    internal_static_RideStarted_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_RideStarted_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RideStarted_descriptor,
        new java.lang.String[] { "DriverId", "DriverGeoCell", });
    internal_static_RideFailed_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_RideFailed_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RideFailed_descriptor,
        new java.lang.String[] { "RideId", });
    internal_static_RideEnded_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_RideEnded_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RideEnded_descriptor,
        new java.lang.String[] { });
    internal_static_JoinCell_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_JoinCell_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_JoinCell_descriptor,
        new java.lang.String[] { });
    internal_static_LeaveCell_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_LeaveCell_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_LeaveCell_descriptor,
        new java.lang.String[] { });
    internal_static_GetDriver_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_GetDriver_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_GetDriver_descriptor,
        new java.lang.String[] { });
    internal_static_DriverInCell_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_DriverInCell_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DriverInCell_descriptor,
        new java.lang.String[] { "DriverId", });
    internal_static_PickupPassenger_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_PickupPassenger_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_PickupPassenger_descriptor,
        new java.lang.String[] { "DriverId", "PassengerId", "PassengerStartCell", "PassengerEndCell", });
    internal_static_DriverRejectsPickup_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_DriverRejectsPickup_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DriverRejectsPickup_descriptor,
        new java.lang.String[] { "DriverId", "RideId", });
    internal_static_GeoCellState_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_GeoCellState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_GeoCellState_descriptor,
        new java.lang.String[] { "DriverId", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
